<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Walgelijk</name>
    </assembly>
    <members>
        <member name="T:Walgelijk.AudioData">
            <summary>
            Object that contains sound data ranging from -1 to 1
            </summary>
        </member>
        <member name="P:Walgelijk.AudioData.ChannelCount">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Walgelijk.AudioData.SampleRate">
            <summary>
            Sample rate
            </summary>
        </member>
        <member name="P:Walgelijk.AudioData.SampleCount">
            <summary>
            Total sample count (per channel)
            </summary>
        </member>
        <member name="P:Walgelijk.AudioData.Duration">
            <summary>
            Duration of the sound
            </summary>
        </member>
        <member name="P:Walgelijk.AudioData.DisposeLocalCopyAfterUpload">
            <summary>
            Should the data be cleared from memory and only remain in the audio engine?
            </summary>
        </member>
        <member name="M:Walgelijk.AudioData.DisposeLocalCopy">
            <summary>
            Remove the data from memory, indicating that the data copy in this structure is no longer needed. This will not affect the actual audio engine.
            </summary>
        </member>
        <member name="M:Walgelijk.AudioData.GetData">
            <summary>
            Get a readonly collection of the raw audio data. This can be null if it has been disposed.
            </summary>
        </member>
        <member name="T:Walgelijk.AudioDistanceModel">
            <summary>
            Available distance models for rolloff calculations
            </summary>
        </member>
        <member name="T:Walgelijk.AudioGen">
            <summary>
            Audio generation and manipulation functions. These only work on 16 bit audio.
            </summary>
        </member>
        <member name="T:Walgelijk.AudioRenderer">
            <summary>
            The global audio renderer 
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Volume">
            <summary>
            Master volume. Ranges from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Muted">
            <summary>
            Mute all audio
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.SetAudioDevice(System.String)">
            <summary>
            Set the audio device. This may reset the audio context. NULL to fallback to the default audio device.
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.GetCurrentAudioDevice">
            <summary>
            Returns the audio device that's currently being used
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.EnumerateAvailableAudioDevices">
            <summary>
            Enumerate through the available audio devices
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.ListenerPosition">
            <summary>
            Position of the listener in world space
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.ListenerOrientation">
            <summary>
            Normalised orientation vectors of the listener in world space. Determines the position of your two "ears".
            </summary>
        </member>
        <member name="F:Walgelijk.AudioRenderer.SpatialMultiplier">
            <summary>
            Global multiplier for any spatial input. E.g any <c>worldPosition</c> parameter, or the listener position. This is used to align the audio world with your scene scale.
            1 by default.
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.DistanceModel">
            <summary>
            The distance model used for audio falloff
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.IsPlaying(Walgelijk.Sound)">
            <summary>
            Returns true if the sound is currently being played. It does not consider temporary sources created using <see cref="!:PlayOnce(Sound, float?, float?, AudioTrack?)"/> or <see cref="!:PlayOnce(Sound, Vector3, float?, float?, AudioTrack?)"/>
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound,System.Single)">
            <summary>
            Simply play a sound (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound,System.Single,System.Single,Walgelijk.AudioTrack)">
            <summary>
            Play a sound once and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound,System.Numerics.Vector3,System.Single)">
            <summary>
            Play sound at a position in the world (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound,System.Numerics.Vector3,System.Single,System.Single,Walgelijk.AudioTrack)">
            <summary>
            Play sound at a position in the world and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.GetCurrentSamples(Walgelijk.Sound,System.Span{System.Single})">
            <summary>
            Populates the given array with the most recently played samples of the given sound.
            Returns the amount of samples.
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.SetPosition(Walgelijk.Sound,System.Numerics.Vector3)">
            <summary>
            Set world position of the sound (if it is spatial)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Stop(Walgelijk.Sound)">
            <summary>
            Stop a specific sound
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Pause(Walgelijk.Sound)">
            <summary>
            Pause a specific sound
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PauseAll">
            <summary>
            Pause all sounds
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PauseAll(Walgelijk.AudioTrack)">
            <summary>
            Pause all sounds in a track
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.ResumeAll">
            <summary>
            Resume all sounds 
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.ResumeAll(Walgelijk.AudioTrack)">
            <summary>
            Resume all sounds in a track
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.StopAll">
            <summary>
            Stop all sounds
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.StopAll(Walgelijk.AudioTrack)">
            <summary>
            Stop all sounds in the given track
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.SetTime(Walgelijk.Sound,System.Single)">
            <summary>
            Set time in seconds for the sound if it is playing
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.GetTime(Walgelijk.Sound)">
            <summary>
            Get time in seconds for the sound if it is playing
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Release">
            <summary>
            Release all resources used by the audio engine
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Process(System.Single)">
            <summary>
            This is called every frame by the main loop and allows the renderer to process things that it needs to process
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.DisposeOf(Walgelijk.AudioData)">
            <summary>
            Release memory used by the given <see cref="T:Walgelijk.AudioData"/>. <see cref="T:Walgelijk.Sound"/>s using this data will become unusable.
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.DisposeOf(Walgelijk.Sound)">
            <summary>
            Release memory used by a sound. <b>This will not dispose of its <see cref="T:Walgelijk.AudioData"/>!</b>
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.UpdateTracks">
            <summary>
            Synchronise all tracks with their updated settings. Called by the loop.
            </summary>
        </member>
        <member name="T:Walgelijk.AudioTrack">
            <summary>
            Track of sounds that.
            </summary>
        </member>
        <member name="F:Walgelijk.AudioTrack.RequiresUpdate">
            <summary>
            Have the properties of this track changed? 
            </summary>
        </member>
        <member name="P:Walgelijk.AudioTrack.Muted">
            <summary>
            Mute flag.
            </summary>
        </member>
        <member name="P:Walgelijk.AudioTrack.Volume">
            <summary>
            Volume from 0.0 to 1.0, inclusive
            </summary>
        </member>
        <member name="P:Walgelijk.AudioTrack.Pitch">
            <summary>
            Pitch value where 1 is no pitch change
            </summary>
        </member>
        <member name="T:Walgelijk.EmptyAudioRenderer">
            <summary>
            Empty audio renderer that is used when none is set
            </summary>
        </member>
        <member name="F:Walgelijk.FixedAudioData.Data">
            <summary>
            Raw data for the audio. This doesn't necessarily contain all audio data as it could be used as a streaming buffer.
            </summary>
        </member>
        <member name="M:Walgelijk.FixedAudioData.#ctor(System.Single[],System.Int32,System.Int32,System.Int64,System.Boolean)">
            <summary>
            Create a sound from raw data ranging from -1 to 1
            </summary>
        </member>
        <member name="F:Walgelijk.FixedAudioData.Beep">
            <summary>
            Beep audio data
            </summary>
        </member>
        <member name="T:Walgelijk.IAudioStream">
            <summary>
            Provides all functionality needed for the audio backend to play the stream of audio
            </summary>
        </member>
        <member name="P:Walgelijk.IAudioStream.Position">
            <summary>
            Current position in the stream
            </summary>
        </member>
        <member name="P:Walgelijk.IAudioStream.SampleRate">
            <summary>
            Samples per second (per channel)
            </summary>
        </member>
        <member name="P:Walgelijk.IAudioStream.ChannelCount">
            <summary>
            Amount of channels. Generally 1 for mono and 2 for stereo.
            If the amount of channels is greater than 1, the samples are interpreted to be interleaved
            </summary>
        </member>
        <member name="M:Walgelijk.IAudioStream.ReadSamples(System.Span{System.Single})">
            <summary>
            Populates the given buffer with the next batch of samples and returns the amount of samples read 
            </summary>
        </member>
        <member name="P:Walgelijk.IAudioStream.TimePosition">
            <summary>
            Current time position in the stream
            </summary>
        </member>
        <member name="P:Walgelijk.IAudioStream.HasEnded">
            <summary>
            True if the stream has reached the end
            </summary>
        </member>
        <member name="T:Walgelijk.Sound">
            <summary>
            A sound that can be played. It does not contain audio data, but is instead linked to an <see cref="T:Walgelijk.AudioData"/>
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Data">
            <summary>
            Reference to the actual audio data that this sound plays. This is a shared object, so other sounds that share this data will also sound different if you manipulate it
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Looping">
            <summary>
            Determines if the sound should loop
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.SpatialParams">
            <summary>
            Spatial settings for this sound. If null, the sound won't be spatial (used for e.g user interface sounds).
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Pitch">
            <summary>
            Pitch adjustment
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Volume">
            <summary>
            Volume adjustment
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.State">
            <summary>
            Currrent sound state
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Track">
            <summary>
            The audio track this sound is playing on
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.RequiresUpdate">
            <summary>
            Should the audio engine update this sound instance? Should be set to true after a property change.
            </summary>
        </member>
        <member name="M:Walgelijk.Sound.ForceUpdate">
            <summary>
            Sets <see cref="F:Walgelijk.Sound.RequiresUpdate"/> to true, forcing the audio engine to synchronise the property change
            </summary>
        </member>
        <member name="F:Walgelijk.Sound.Beep">
            <summary>
            Beep sound
            </summary>
        </member>
        <member name="M:Walgelijk.Sound.Finalize">
            <summary>
            Calls <see cref="M:Walgelijk.AudioRenderer.DisposeOf(Walgelijk.Sound)"/>
            </summary>
        </member>
        <member name="T:Walgelijk.SoundState">
            <summary>
            States that a sound can be in
            </summary>
        </member>
        <member name="F:Walgelijk.SoundState.Idle">
            <summary>
            Untouched by audio engine.
            </summary>
        </member>
        <member name="F:Walgelijk.SoundState.Playing">
            <summary>
            Currently playing.
            </summary>
        </member>
        <member name="F:Walgelijk.SoundState.Paused">
            <summary>
            Not playing but not stopped either. This sound can be resumed.
            </summary>
        </member>
        <member name="F:Walgelijk.SoundState.Stopped">
            <summary>
            
            </summary>
        </member>
        <member name="T:Walgelijk.SpatialParams">
            <summary>
            Options for spatial sounds
            </summary>
        </member>
        <member name="F:Walgelijk.SpatialParams.ReferenceDistance">
            <summary>
            The midpoint of the rolloff curve. In other words, the distance at which the sound will be at half volume according to the distance model used.
            If this is 0, no attenuation will occur at all.
            Note how this value is ultimately transformed by <see cref="F:Walgelijk.AudioRenderer.SpatialMultiplier"/>
            <br></br>
            Default is <c>1</c>
            </summary>
        </member>
        <member name="F:Walgelijk.SpatialParams.MaxDistance">
            <summary>
            The distance at which the sound will no longer get any quieter. 
            If this is 0, no attenuation will occur at all.
            Note how this value is ultimately transformed by <see cref="F:Walgelijk.AudioRenderer.SpatialMultiplier"/>
            <br></br>
            Default is <c>float.PositiveInfinity</c>
            </summary>
        </member>
        <member name="F:Walgelijk.SpatialParams.RolloffFactor">
            <summary>
            A higher rolloff factor will make the sound reduce in volume more quickly as the listener moves away from the source, while a lower rolloff factor makes the sound reduce in volume more slowly.
            If this is 0, no attenuation will occur at all.
            <br></br>
            Default is <c>1</c>
            </summary>
        </member>
        <member name="M:Walgelijk.StreamAudioData.DisposeLocalCopy">
            <summary>
            This does nothing because the stream is managed by the audio renderer
            </summary>
        </member>
        <member name="M:Walgelijk.StreamAudioData.GetData">
            <summary>
            Returns an empty span because this object has no knowledge of the data being read other than its source
            </summary>
        </member>
        <member name="T:Walgelijk.Background">
            <summary>
            Utility struct that provides background image creation functionality
            </summary>
        </member>
        <member name="M:Walgelijk.Background.CreateBackground(Walgelijk.Scene,Walgelijk.IReadableTexture)">
            <summary>
            Creates a background for the scene. Also creates the necessary systems if they are not already present. By default, backgrounds are rendered at render order (-1000, 0)
            </summary>
        </member>
        <member name="T:Walgelijk.Background.BackgroundSystem">
            <summary>
            Handles backgrounds created using <see cref="M:Walgelijk.Background.CreateBackground(Walgelijk.Scene,Walgelijk.IReadableTexture)"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Background.BackgroundComponent">
            <summary>
            Contains the texture to render and what properties the background has
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.RenderOrder">
            <summary>
            The order at which to draw the backgound. 
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.Visible">
            <summary>
            Whether to draw it at all
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.Offset">
            <summary>
            Translational offset
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.Mode">
            <summary>
            Manner in which to draw the background 
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.Size">
            <summary>
            Size of the texture
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundComponent.RenderTask">
            <summary>
            Relevant render task
            </summary>
        </member>
        <member name="T:Walgelijk.Background.BackgroundMode">
            <summary>
            Manners in which to draw the background
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundMode.Stretch">
            <summary>
            Fill the whole screen
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundMode.Center">
            <summary>
            Original size, centered
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundMode.Cover">
            <summary>
            Fill the whole screen while keeping the aspect ratio
            </summary>
        </member>
        <member name="F:Walgelijk.Background.BackgroundMode.Contain">
            <summary>
            Grow as large as possible without cropping
            </summary>
        </member>
        <member name="T:Walgelijk.CameraComponent">
            <summary>
            Component that holds camera data
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.OrthographicSize">
            <summary>
            The orthographic size of this camera
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.PixelsPerUnit">
            <summary>
            Amount of pixels per translation unit
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.TaskOrder">
            <summary>
            The order of this camera's tasks. <see cref="F:System.Int32.MinValue"/> by default
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.ClearColour">
            <summary>
            Colour to clear with
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.Clear">
            <summary>
            Should this camera clear the target before rendering?
            </summary>
        </member>
        <member name="T:Walgelijk.CameraSystem">
            <summary>
            System that manages the built in <see cref="T:Walgelijk.CameraComponent"/>
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraEntity">
            <summary>
            Main camera entity
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraComponent">
            <summary>
            Main camera component
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraTransform">
            <summary>
            Main camera transform component
            </summary>
        </member>
        <member name="F:Walgelijk.CameraSystem.SetMatricesPreRender">
            <summary>
            Set the correct matrices even before the RenderQueue is executed. This makes sure the Window point mapping functions don't lag behind 1 frame at the negligable cost of performance.
            </summary>
        </member>
        <member name="M:Walgelijk.CameraSystem.SetMainCamera(Walgelijk.Entity)">
            <summary>
            Set the main camera for this system
            </summary>
        </member>
        <member name="T:Walgelijk.DebugCameraSystem">
            <summary>
            Provides basic WASD + - camera controls
            </summary>
        </member>
        <member name="P:Walgelijk.DebugCameraSystem.Speed">
            <summary>
            Movement speed
            </summary>
        </member>
        <member name="P:Walgelijk.DebugCameraSystem.ZoomFactor">
            <summary>
            Zoom speed
            </summary>
        </member>
        <member name="T:Walgelijk.InterpolationFlags">
            <summary>
            Interpolation bit mask for <see cref="T:Walgelijk.TransformComponent"/>
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.None">
            <summary>
            Interpolate nothing
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.Position">
            <summary>
            Interpolate position
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.Rotation">
            <summary>
            Interpolate rotation
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.Scale">
            <summary>
            Interpolate scale
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.LocalPivot">
            <summary>
            Interpolate pivot
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.LocalRotationPivot">
            <summary>
            Interpolate rotation pivot
            </summary>
        </member>
        <member name="F:Walgelijk.InterpolationFlags.All">
            <summary>
            Interpolate everything
            </summary>
        </member>
        <member name="T:Walgelijk.QuadShapeComponent">
            <summary>
            Primitive quad component. Vertices can't be altered.
            </summary>
        </member>
        <member name="P:Walgelijk.QuadShapeComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="M:Walgelijk.QuadShapeComponent.#ctor(System.Boolean)">
            <summary>
            Create a quad shape component
            </summary>
        </member>
        <member name="T:Walgelijk.RectangleShapeComponent">
            <summary>
            Basic rectangle renderer data
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Color">
            <summary>
            Colour of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Size">
            <summary>
            Size of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Pivot">
            <summary>
            Pivot point of the rectangle ranging from (0.0, 0.0) to (1.0, 1.0). Default is (0.5, 0.5).
            </summary>
        </member>
        <member name="M:Walgelijk.RectangleShapeComponent.#ctor">
            <summary>
            Create a rectangle renderer component
            </summary>
        </member>
        <member name="T:Walgelijk.SeparateTransformMatrices">
            <summary>
            All transform matrices separated by step
            </summary>
        </member>
        <member name="F:Walgelijk.SeparateTransformMatrices.AfterPivot">
            <summary>
            0: The initial model matrix. A translation matrix for the transform pivot.
            </summary>
        </member>
        <member name="F:Walgelijk.SeparateTransformMatrices.AfterScale">
            <summary>
            1: The matrix after scaling
            </summary>
        </member>
        <member name="F:Walgelijk.SeparateTransformMatrices.AfterRotation">
            <summary>
            2: The matrix after rotating
            </summary>
        </member>
        <member name="F:Walgelijk.SeparateTransformMatrices.AfterTranslation">
            <summary>
            3: The matrix after translating (local space)
            </summary>
        </member>
        <member name="F:Walgelijk.SeparateTransformMatrices.FinalModel">
            <summary>
            4: The final model matrix (parent matrix applied)
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeComponent">
            <summary>
            Provides a <see cref="P:Walgelijk.ShapeComponent.VertexBuffer"/> and <see cref="T:Walgelijk.ShapeRenderTask"/>
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.VertexBuffer">
            <summary>
            VertexBuffer that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.RenderTask">
            <summary>
            The render task that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.ScreenSpace">
            <summary>
            Determines if the shape should be rendered in screenspace
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.RenderOrder">
            <summary>
            Order of the rendering task
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.Visible">
            <summary>
            Whether or not the component is rendered by the system
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.Color">
            <summary>
            Sets the "tint" uniform before rendering. If null, does nothing.
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.HorizontalFlip">
            <summary>
            Apply horizontal flip
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.VerticalFlip">
            <summary>
            Apply vertical flip
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.AdditionalTransform">
            <summary>
            Optional additional transform applied to the final render
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeRendererSystem">
            <summary>
            System that renders components that implement <see cref="T:Walgelijk.ShapeComponent"/>
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen">
            <summary>
            Utility struct that provides splash screen creation functionality
            </summary>
        </member>
        <member name="M:Walgelijk.SplashScreen.CreateScene(Walgelijk.IReadableTexture,Walgelijk.SplashScreen.Logo[],System.Action,Walgelijk.SplashScreen.Transition,System.Boolean)">
            <summary>
            Create a splash screen scene
            </summary>
            <param name="logos">Array of logos</param>
            <param name="onEnd">What to do when the logo sequence ends. This is usually a scene change</param>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.SplashScreen.SplashScreenComponent">
            <summary>
            Component with splash screen information
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Logos">
            <summary>
            Array of logos
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.CurrentTime">
            <summary>
            Current elapsed time since the last logo change
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Lifetime">
            <summary>
            Current elapsed time since the creation
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.CurrentLogoIndex">
            <summary>
            Current logo index
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.OnEnd">
            <summary>
            What to do once all logos have been displayed
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Background">
            <summary>
            Optional background that is drawn under everything
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Transition">
            <summary>
            Transition between logos
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.TransitionDuration">
            <summary>
            Amount of time the transition takes
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.CanSkip">
            <summary>
            Can the entire sequence be skipped by pushing any button (mouse or keyboard)? 
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Transition.Cut">
            <summary>
            No transition. Just cut.
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Transition.FadeInOut">
            <summary>
            Let logos fade in and fade out before switching to the next logo. <b>This is not a crossfade</b>
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen.Logo">
            <summary>
            Structure with information on how to display a logo
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Texture">
            <summary>
            Texture to display
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Duration">
            <summary>
            How long the logo should appear for
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Offset">
            <summary>
            Translational offset
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Sound">
            <summary>
            Sound to play
            </summary>
        </member>
        <member name="M:Walgelijk.SplashScreen.Logo.#ctor(Walgelijk.IReadableTexture,System.Numerics.Vector2,System.Single,Walgelijk.Sound)">
            <summary>
            Create a logo with a texture and an optional sound
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen.SplashScreenSystem">
            <summary>
            System that handles <see cref="T:Walgelijk.SplashScreen.SplashScreenComponent"/>
            </summary>
        </member>
        <member name="T:Walgelijk.SpriteComponent">
            <summary>
            A special shape component that can only render quads with a texture
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.Texture">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteComponent.RenderTask">
            <summary>
            The task that will be sent to the render queue
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.ScreenSpace">
            <summary>
            Determines if the sprite should be rendered in screenspace
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.RenderOrder">
            <summary>
            Order of the rendering task
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.Visible">
            <summary>
            Whether or not the sprite is rendered by the system
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.Color">
            <summary>
            Sets the "tint" uniform before rendering. If null, does nothing.
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.HorizontalFlip">
            <summary>
            Apply horizontal flip
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteComponent.VerticalFlip">
            <summary>
            Apply vertical flip
            </summary>
        </member>
        <member name="M:Walgelijk.SpriteComponent.#ctor(Walgelijk.IReadableTexture)">
            <summary>
            Create a SpriteComponent
            </summary>
        </member>
        <member name="T:Walgelijk.TransformComponent">
            <summary>
            Basic component that holds transformation data
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Children">
            <summary>
            Get the list of children
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Parent">
            <summary>
            Parent entity with a transform
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Position">
            <summary>
            Position of the transform in parent space (global if no parent)
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Rotation">
            <summary>
            Rotation in degrees of the transform in world space
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Scale">
            <summary>
            Scale multiplier of the transform
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.LocalPivot">
            <summary>
            The local pivot point that is the center of all transformations.
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.LocalRotationPivot">
            <summary>
            The local pivot point that is the center of rotation.
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.IsMatrixCached">
            <summary>
            Returns if the model matrix is aligned to the transformation
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.LocalToWorldMatrix">
            <summary>
            The generated model matrix
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.WorldToLocalMatrix">
            <summary>
            The inverse model matrix
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.SeparateMatrices">
            <summary>
            All transform matrices separated by step. Useful for transforming specific vectors to/from local space
            </summary>
        </member>
        <member name="M:Walgelijk.TransformComponent.RecalculateModelMatrix(System.Numerics.Matrix3x2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Recalculate the model matrix considering a containing matrix. This is usually <see cref="P:System.Numerics.Matrix3x2.Identity"/>
            </summary>
        </member>
        <member name="M:Walgelijk.TransformComponent.RecalculateModelMatrix(System.Numerics.Matrix3x2)">
            <summary>
            Recalculate the model matrix considering a containing matrix. This is usually <see cref="P:System.Numerics.Matrix3x2.Identity"/>
            </summary>
        </member>
        <member name="T:Walgelijk.TransformSystem">
            <summary>
            The system responsible for processing transforms
            </summary>
        </member>
        <member name="F:Walgelijk.TransformSystem.Parenting">
            <summary>
            Enable transform parenting?
            </summary>
        </member>
        <member name="T:Walgelijk.ComponentAttribute">
            <summary>
            Base class for attributes that indicate a component constraint
            </summary>
        </member>
        <member name="T:Walgelijk.BasicComponentCollection">
            <summary>
            Represents a thread safe collection of components and their entities
            </summary>
        </member>
        <member name="P:Walgelijk.BasicComponentCollection.Count">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.Attach``1(Walgelijk.Entity,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.Contains``1">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAll(System.Span{Walgelijk.Component})">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAll(Walgelijk.Component[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllFrom(Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllFrom(Walgelijk.Entity,System.Span{Walgelijk.Component})">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllFrom(Walgelijk.Entity,Walgelijk.Component[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllOfType``1">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllOfType``1(System.Span{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetAllOfType``1(``0[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.GetFrom``1(Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.TryGetFrom``1(Walgelijk.Entity,``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.Has``1(Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.HasEntity(Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.Remove``1(Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.Remove(System.Type,Walgelijk.Entity)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicComponentCollection.SyncBuffers">
            <inheritdoc/>
        </member>
        <member name="T:Walgelijk.Component">
            <summary>
            Component base class. Contains a reference to the entity that is attached.
            </summary>
        </member>
        <member name="P:Walgelijk.Component.Entity">
            <summary>
            The entity that this component is attached to
            </summary>
        </member>
        <member name="T:Walgelijk.IComponentCollection">
            <summary>
            Represents a thread safe collection of components and their entities
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Attach``1(Walgelijk.Entity,``0)">
            <summary>
            Attach component to entity
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Remove``1(Walgelijk.Entity)">
            <summary>
            Detach component from entity and dispose
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Remove(System.Type,Walgelijk.Entity)">
            <summary>
            Detach component from entity and dispose
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Remove(Walgelijk.Entity)">
            <summary>
            Remove all components from the entity 
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllFrom(Walgelijk.Entity)">
            <summary>
            Get all components attached to an entity
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllFrom(Walgelijk.Entity,System.Span{Walgelijk.Component})">
            <summary>
            Get all components attached to an entity and put it in the given span. 
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllFrom(Walgelijk.Entity,Walgelijk.Component[],System.Int32,System.Int32)">
            <summary>
            Get all components attached to an entity and put it int the given array at the given position. 
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetFrom``1(Walgelijk.Entity)">
            <summary>
            Get a component from an entity
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.TryGetFrom``1(Walgelijk.Entity,``0@)">
            <summary>
            Try to get a component from an entity. 
            Returns true if the retrieval was succesful
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllOfType``1">
            <summary>
            Get all components by type
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllOfType``1(System.Span{``0})">
            <summary>
            Get all components by type and put it in the given span. 
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAllOfType``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get all components by type and put it int the given array at the given position. 
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAll">
            <summary>
            Get all components
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAll(System.Span{Walgelijk.Component})">
            <summary>
            Get all components and put it in the given span
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.GetAll(Walgelijk.Component[],System.Int32,System.Int32)">
            <summary>
            Get all components and put it in the given array at the given position
            Returns actual amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Has``1(Walgelijk.Entity)">
            <summary>
            Returns true if the entity has a component of the given type
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.HasEntity(Walgelijk.Entity)">
            <summary>
            Returns true if the entity was found in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.Contains``1">
            <summary>
            Returns true if there exists a component of this type
            </summary>
        </member>
        <member name="M:Walgelijk.IComponentCollection.SyncBuffers">
            <summary>
            Called when a frame has ended. 
            The collection will empty its add and destroy buffers and update the main component collection.
            </summary>
        </member>
        <member name="P:Walgelijk.IComponentCollection.Count">
            <summary>
            Amount of components in total
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.SetTag(Walgelijk.Entity,Walgelijk.Tag)">
            <summary>
            Attaches a tag to an entity
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.HasTag(Walgelijk.Entity,Walgelijk.Tag)">
            <summary>
            Returns true if the entity has the given tag
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.ClearTag(Walgelijk.Entity)">
            <summary>
            Detaches a tag from an entity
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.TryGetTag(Walgelijk.Entity,Walgelijk.Tag@)">
            <summary>
            Returns true if the given entity has a tag attached. The tag is returned in the output parameter <paramref name="tag"/>
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.GetEntitiesWithTag(Walgelijk.Tag)">
            <summary>
            Returns all entities with the given tag
            </summary>
        </member>
        <member name="M:Walgelijk.BasicEntityCollection.TryGetEntityWithTag(Walgelijk.Tag,Walgelijk.Entity@)">
            <summary>
            Returns true if any entity with a given tag is found. The entity is returned in the output parameter <paramref name="entity"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Entity">
            <summary>
            An entity. Does nothing, simply holds an identity. Implicitly an integer. Entity 0 is reserved for "non existent"
            </summary>
        </member>
        <member name="F:Walgelijk.Entity.Identity">
            <summary>
            The identity of the entity
            </summary>
        </member>
        <member name="P:Walgelijk.Entity.None">
            <summary>
            The "non existent" entity
            </summary>
        </member>
        <member name="T:Walgelijk.IdentityGenerator">
            <summary>
            Generates entity identities
            </summary>
        </member>
        <member name="M:Walgelijk.IdentityGenerator.Generate">
            <summary>
            Generate a new identity value
            </summary>
        </member>
        <member name="M:Walgelijk.IEntityCollection.SyncBuffers">
            <summary>
            Called when a frame has ended. 
            The collection will empty its add and destroy buffers and update the main entity collection.
            </summary>
        </member>
        <member name="T:Walgelijk.Tag">
            <summary>
            A tag that can be connected to an entity. Multiple objects can share the same tag.
            </summary>
        </member>
        <member name="F:Walgelijk.Tag.Value">
            <summary>
            The tag value
            </summary>
        </member>
        <member name="M:Walgelijk.Tag.CreateUnique">
            <summary>
            Generate new Tag with a unique value that probably doesn't matter
            </summary>
        </member>
        <member name="T:Walgelijk.RequiresComponents">
            <summary>
            Attribute that lets the <see cref="T:Walgelijk.Scene"/> know that something needs something else.
            </summary>
        </member>
        <member name="F:Walgelijk.RequiresComponents.Types">
            <summary>
            Relevant component types
            </summary>
        </member>
        <member name="M:Walgelijk.RequiresComponents.#ctor(System.Type[])">
            <summary>
            Construct a <see cref="T:Walgelijk.RequiresComponents"/> with the given types
            </summary>
        </member>
        <member name="T:Walgelijk.Scene">
            <summary>
            Stores and manages components and systems
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.Game">
            <summary>
            Game this scene belongs to
            </summary>
        </member>
        <member name="F:Walgelijk.Scene.Id">
            <summary>
            Globally unique ID for this scene
            </summary>
        </member>
        <member name="F:Walgelijk.Scene.ScenePersistence">
            <summary>
            Determines behaviour when this scene is switched away by <see cref="P:Walgelijk.Scene.Game"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor(Walgelijk.Game,Walgelijk.SceneId)">
            <summary>
            Create scene for a <see cref="P:Walgelijk.Scene.Game"/> without setting it as the active scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor(Walgelijk.SceneId)">
            <summary>
            Create scene without an attached game. This can cause issues when a <see cref="T:Walgelijk.System"/> expects a game
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor(Walgelijk.Game)">
            <summary>
            Create scene for a <see cref="P:Walgelijk.Scene.Game"/> without setting it as the active scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor">
            <summary>
            Create scene without an attached game. This can cause issues when a <see cref="T:Walgelijk.System"/> expects a game
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnActive">
            <summary>
            Fired when this scene is made active
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnInactive">
            <summary>
            Fired when this scene is made inactive
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnCreateEntity">
            <summary>
            Fired when an entity is created and registered
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnRemovedEntity">
            <summary>
            Fired when an entity is removed
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAttachComponent">
            <summary>
            Fired when a component is attached to an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnDetachComponent">
            <summary>
            Fired when a component is detached from an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAddSystem">
            <summary>
            Fired when a system is added
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AddSystem``1(``0)">
            <summary>
            Add a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetSystem``1">
            <summary>
            Retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetSystem(System.Type)">
            <summary>
            Retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetSystem``1(``0@)">
            <summary>
            Try to retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetSystem(System.Type,Walgelijk.System@)">
            <summary>
            Try to retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.HasSystem``1">
            <summary>
            Returns true if the system of the given type exists in the scene and returns false otherwise.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.HasSystem(System.Type)">
            <summary>
            Returns true if the system of the given type exists in the scene and returns false otherwise.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RemoveSystem``1">
            <summary>
            Remove system from the list. Getting rid of any references to it is not handled, so the object might remain in memory.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetSystems">
            <summary>
            Get all systems
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.CreateEntity">
            <summary>
            Register a new entity to the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RegisterExistingEntity(Walgelijk.Entity)">
            <summary>
            Add an entity with a specific identity. Note that this might cause a collision
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Walgelijk.Scene.RemoveEntity(Walgelijk.Entity)">
            <summary>
            Removes the entity from the list. Also removes all attached components. Any references to the entity will become useless as they will point to nothing. References to any attached components are not handled, so they may remain in memory.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:Walgelijk.Scene.HasEntity(Walgelijk.Entity)">
            <summary>
            Get if an entity lives in the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllEntities">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.EntityCount">
            <summary>
            Amount of entities in the scene
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.Disposed">
            <summary>
            Returns true if this scene has been disposed and should no longer be used
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsFrom(Walgelijk.Entity)">
            <summary>
            Get all components attached to the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsOfType``1">
            <summary>
            Get all components and entities of a certain type
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsOfType``1(``0[])">
            <summary>
            Get all components and entities of a certain type and put them into the given buffer, returning the relevant section of it
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.CopyAllComponentsOfType``1(``0[])">
            <summary>
            Get all components and entities and add them into the given array. It returns the amount of items that were inserted.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.FindAnyComponent``1(``0@)">
            <summary>
            Returns the first found instance of the given type.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetComponentFrom``1(Walgelijk.Entity)">
            <summary>
            Retrieve the first component of the specified type on the given entity, otherwise returns default
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetComponentFrom``1(Walgelijk.Entity,``0@)">
            <summary>
            Retrieve the first component of the specified type on the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.HasComponent``1(Walgelijk.Entity)">
            <summary>
            Get if an entity has a component.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AttachComponent``1(Walgelijk.Entity,``0)">
            <summary>
            Attach a component to an entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.DetachComponent``1(Walgelijk.Entity)">
            <summary>
            Detach a component from an entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.DetachComponentImmediate``1(Walgelijk.Entity)">
            <summary>
            Detach a component from an entity and sync the buffers immediately.
            So if you call <see cref="M:Walgelijk.Scene.DetachComponentImmediate``1(Walgelijk.Entity)"/> and then
            <see cref="M:Walgelijk.Scene.HasComponent``1(Walgelijk.Entity)"/> in the same frame/tick, 
            <see cref="M:Walgelijk.Scene.HasComponent``1(Walgelijk.Entity)"/> will return the correct value.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.UpdateSystems">
            <summary>
            Executes all systems
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.SyncBuffers">
            <summary>
            When adding or removing components or systems, they won't be returned by querying methods until the following frame. You can call this method to force update the buffers after adding/removing stuff
            if you really need to query them immediately.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.FixedUpdateSystems">
            <summary>
            Executes all systems
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.Initialise">
            <summary>
            Prepares the scene for immediate activity. This is handled by the engine so there is no need to call this unless you know why you're calling it.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RenderSystems">
            <summary>
            Renders all systems that implement rendering code. This is typically handled by the window implementation
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.Dispose">
            <summary>
            Unload all entities and components in the scene.
            </summary>
        </member>
        <member name="T:Walgelijk.SceneCache">
            <summary>
            A dictionary for scenes used by <see cref="T:Walgelijk.Game"/>
            </summary>
        </member>
        <member name="F:Walgelijk.ScenePersistence.Dispose">
            <summary>
            Dispose the scene and remove it from the scene cache
            </summary>
        </member>
        <member name="F:Walgelijk.ScenePersistence.Persist">
            <summary>
            Keep the scene in memory
            </summary>
        </member>
        <member name="T:Walgelijk.SingleInstanceAttribute">
            <summary>
            Attribute that ensures no more than one instance of the component may exist in the scene at a time
            </summary>
        </member>
        <member name="T:Walgelijk.BasicSystemCollection">
            <summary>
            Represents a thread safe collection of systems
            </summary>
        </member>
        <member name="P:Walgelijk.BasicSystemCollection.Count">
            <inheritdoc/>
        </member>
        <member name="F:Walgelijk.BasicSystemCollection.Capacity">
            <summary>
            Maximum system amount. Can only be set on creation
            </summary>
        </member>
        <member name="P:Walgelijk.BasicSystemCollection.Scene">
            <inheritdoc/>
        </member>
        <member name="E:Walgelijk.BasicSystemCollection.OnSystemAdded">
            <inheritdoc/>
        </member>
        <member name="E:Walgelijk.BasicSystemCollection.OnSystemRemoved">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.#ctor(Walgelijk.Scene,System.Int32)">
            <summary>
            Create a new <see cref="T:Walgelijk.BasicSystemCollection"/> with the given scene
            </summary>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:Walgelijk.BasicSystemCollection"/>
            </summary>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Add``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Remove``1">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Remove(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Get``1">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.GetAll(Walgelijk.System[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.GetAll(System.Span{Walgelijk.System})">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.GetAll">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Has``1">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Has(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.TryGet``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.TryGet(System.Type,Walgelijk.System@)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.BasicSystemCollection.Sort">
            <inheritdoc/>
        </member>
        <member name="T:Walgelijk.ISystemCollection">
            <summary>
            Represents a thread safe collection of systems
            </summary>
        </member>
        <member name="P:Walgelijk.ISystemCollection.Scene">
            <summary>
            Scene that this collection belongs to
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Add``1(``0)">
            <summary>
            Adds a system of type T to the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Remove``1">
            <summary>
            Remove a system of type T from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Remove(System.Type)">
            <summary>
            Remove a system of the given type from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Get``1">
            <summary>
            Retrieves a system of type T from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Get(System.Type)">
            <summary>
            Retrieves a system from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.TryGet``1(``0@)">
            <summary>
            Attempts to retrieve a system of type T from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.TryGet(System.Type,Walgelijk.System@)">
            <summary>
            Attempts to retrieve a system from the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Has``1">
            <summary>
            Determines whether the collection contains a system of the specified type.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Has(System.Type)">
            <summary>
            Determines whether the collection contains a system of the specified type.
            </summary>
        </member>
        <member name="P:Walgelijk.ISystemCollection.Count">
            <summary>
            Gets the number of systems in the collection.
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.GetAll(Walgelijk.System[],System.Int32,System.Int32)">
            <summary>
            Puts all systems in the collection into the specified array given an offset and maximum amount
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.GetAll(System.Span{Walgelijk.System})">
            <summary>
            Puts all systems in the collection into the specified span
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.GetAll">
            <summary>
            Returns a span with all systems
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.Sort">
            <summary>
            Called after the collection is edited to sort it based on ExecutionOrder
            </summary>
        </member>
        <member name="M:Walgelijk.ISystemCollection.InitialiseNewSystems">
            <summary>
            Initialise every new system, after which they are removed from the new system list
            </summary>
        </member>
        <member name="E:Walgelijk.ISystemCollection.OnSystemAdded">
            <summary>
            Fired right after a system is added
            </summary>
        </member>
        <member name="E:Walgelijk.ISystemCollection.OnSystemRemoved">
            <summary>
            Fired right before a system is removed
            </summary>
        </member>
        <member name="T:Walgelijk.System">
            <summary>
            Holds game logic
            </summary>
        </member>
        <member name="F:Walgelijk.System.Enabled">
            <summary>
            Should this be updated and rendered? 
            </summary>
        </member>
        <member name="P:Walgelijk.System.Scene">
            <summary>
            Containing scene
            </summary>
        </member>
        <member name="P:Walgelijk.System.Input">
            <summary>
            Current input state
            </summary>
        </member>
        <member name="P:Walgelijk.System.Time">
            <summary>
            Current time information
            </summary>
        </member>
        <member name="P:Walgelijk.System.RenderQueue">
            <summary>
            Active render queue
            </summary>
        </member>
        <member name="P:Walgelijk.System.Audio">
            <summary>
            Active audio renderer
            </summary>
        </member>
        <member name="P:Walgelijk.System.Game">
            <summary>
            Relevant game instance
            </summary>
        </member>
        <member name="P:Walgelijk.System.Window">
            <summary>
            Relevant window instance
            </summary>
        </member>
        <member name="P:Walgelijk.System.Graphics">
            <summary>
            Relevant graphics instance
            </summary>
        </member>
        <member name="P:Walgelijk.System.Log">
            <summary>
            Relevant logging instance
            </summary>
        </member>
        <member name="P:Walgelijk.System.ExecutionOrder">
            <summary>
            The order of execution relative to other systems. The lower, the earlier it gets executed.
            </summary>
        </member>
        <member name="F:Walgelijk.System.OrderOfAddition">
            <summary>
            Separate ordering value that is determined by the chronological order of this sytem within the collection
            </summary>
        </member>
        <member name="P:Walgelijk.System.DevelopmentMode">
            <summary>
            Is the game running in dev mode?
            </summary>
        </member>
        <member name="P:Walgelijk.System.DebugDraw">
            <summary>
            Debug drawing utilities
            </summary>
        </member>
        <member name="P:Walgelijk.System.Profiler">
            <summary>
            The active profiler
            </summary>
        </member>
        <member name="M:Walgelijk.System.Initialise">
            <summary>
            Initialise the system
            </summary>
        </member>
        <member name="M:Walgelijk.System.Update">
            <summary>
            Run logic at <see cref="F:Walgelijk.Game.UpdateRate"/> Hz
            </summary>
        </member>
        <member name="M:Walgelijk.System.FixedUpdate">
            <summary>
            Run logic at <see cref="F:Walgelijk.Game.FixedUpdateRate"/> Hz
            </summary>
        </member>
        <member name="M:Walgelijk.System.PreRender">
            <summary>
            Run pre rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.Render">
            <summary>
            Run rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.PostRender">
            <summary>
            Run post rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.OnActivate">
            <summary>
            Invoked when the scene becomes active
            </summary>
        </member>
        <member name="M:Walgelijk.System.OnDeactivate">
            <summary>
            Invoked when the scene becomes inactive
            </summary>
        </member>
        <member name="T:Walgelijk.AttributeType">
            <summary>
            Possible vertex attribute types
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Integer">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Float">
            <summary>
            Single precision value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Double">
            <summary>
            Double precision value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector2">
            <summary>
            Two single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector3">
            <summary>
            Three single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector4">
            <summary>
            Four single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Matrix4x4">
            <summary>
            Four rows of Vector4
            </summary>
        </member>
        <member name="T:Walgelijk.BlendMode">
            <summary>
            Blend modes
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.AlphaBlend">
            <summary>
            Default blend mode
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Addition">
            <summary>
            Adds RGB values
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Screen">
            <summary>
            Invert, multiply, invert
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Multiply">
            <summary>
            Multiply blend mode
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Lighten">
            <summary>
            Only keeps the greatest pixel value
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Darken">
            <summary>
            Only keeps the smallest pixel value
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Overlay">
            <summary>
            Only keeps the smallest pixel value
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Negate">
            <summary>
            Inverts pixel values
            </summary>
        </member>
        <member name="F:Walgelijk.BlendMode.Overwrite">
            <summary>
            Overwrite blend mode (disables blending)
            </summary>
        </member>
        <member name="T:Walgelijk.BuiltInShaders">
            <summary>
            Contains all raw built-in shader code used by the engine. These can be changed before a <see cref="T:Walgelijk.Game"/> instance is created
            </summary>
        </member>
        <member name="T:Walgelijk.Color">
            <summary>
            Colour with 4 floating point components ranging from 0-1
            </summary>
        </member>
        <member name="F:Walgelijk.Color.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Color.R">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.G">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.B">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a colour using floating point values ranging from 0 to 1 in standard dynamic range
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a colour using bytes where 0 is 0.0 and 255 is 1.0
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
            Create a colour based on a hexadecimal representation, such as "#d42c5e"
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Int32)">
            <summary>
            Create a colour based on a hexadecimal representation as an integer, such as "0x2e021b"
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.UInt32)">
            <summary>
            Create a colour based on a hexadecimal representation as an unsigned integer, such as "0x2e021b5e"
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.ReadOnlySpan{System.Single})">
            <summary>
            Create a colour using floating point values ranging from 0 to 1 in standard dynamic range.
            Values are expected in order RGBA
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Red">
            <summary>
            Bright vermilion
            </summary>
        </member>
        <member name="P:Walgelijk.Color.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Blue">
            <summary>
            Cobalt blue
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="M:Walgelijk.Color.Clamped">
            <summary>
            Returns a copy of this colour with each value clamped between 0 and 1 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Color.WithAlpha(System.Single)">
            <summary>
            Return a copy of the colour with the given alpha
            </summary>
        </member>
        <member name="M:Walgelijk.Color.ToBytes">
            <summary>
            Returns a tuple where each element corresponds with a component of the colour
            </summary>
        </member>
        <member name="M:Walgelijk.Color.GetHsv(System.Single@,System.Single@,System.Single@)">
            <summary>
            Get HSV all of which are in range 0 to 1
            </summary>
        </member>
        <member name="M:Walgelijk.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create an RGBA colour from the given HSV values in the range 0 to 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Color.GetLuminance">
            <summary>
            Get the perceived luminance
            </summary>
        </member>
        <member name="T:Walgelijk.Colors">
            <summary>
            Collection of predefined, commonly used colours
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Transparent">
            <summary>
            Transparent (0,0,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Red">
            <summary>
            Red (1,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Blue">
            <summary>
            Blue (0,0,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Green">
            <summary>
            Green (0,1,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Magenta">
            <summary>
            Magenta (1,0,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.GreenYellow">
            <summary>
            Green yellow
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Cyan">
            <summary>
            Cyan (0,1,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Sky">
            <summary>
            Sky
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Black">
            <summary>
            Black (0,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.White">
            <summary>
            White (1,1,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.WhiteSmoke">
            <summary>
            White smoke
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="T:Walgelijk.DebugDraw">
            <summary>
            Debug drawing utility class. Usually accessed using <see cref="P:Walgelijk.System.DebugDraw"/> or <see cref="P:Walgelijk.Game.DebugDraw"/>
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.#ctor(Walgelijk.Game)">
            <summary>
            Construct debug draw
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Walgelijk.DebugDraw.Render">
            <summary>
            Update the debug drawer and remove expired drawings
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Line(System.Numerics.Vector2,System.Numerics.Vector2,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a line
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Cross(System.Numerics.Vector2,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a cross
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Circle(System.Numerics.Vector2,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a wire circle
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Rectangle(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a rectangle
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Rectangle(Walgelijk.Rect,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a rectangle
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Text(System.Numerics.Vector2,System.String,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a rectangle
            </summary>
        </member>
        <member name="T:Walgelijk.QOIDecoder">
            <summary>Decoder of the "Quite OK Image" (QOI) format.</summary>
        </member>
        <member name="M:Walgelijk.QOIDecoder.Decode(System.ReadOnlySpan{System.Byte}@,System.Int32,System.Boolean@,System.Int32@,System.Int32@,System.Int32[]@)">
            <summary>Decodes the given QOI file contents.</summary>
            <remarks>Returns <see langword="true" /> if decoded successfully.</remarks>
            <param name="encoded">QOI file contents. Only the first <c>encodedSize</c> bytes are accessed.</param>
            <param name="encodedSize">QOI file length.</param>
        </member>
        <member name="T:Walgelijk.SkiaSharpDecoder">
            <summary>
            Decodes the most common image formats (PNG, JPEG, BMP, etc.)
            </summary>
        </member>
        <member name="M:Walgelijk.SkiaSharpDecoder.CopyPixels(SkiaSharp.SKBitmap,Walgelijk.Color[]@,System.Boolean)">
            <summary>
            Copies pixels from <see cref="T:SkiaSharp.SKBitmap"/> to an array
            </summary>
        </member>
        <member name="T:Walgelijk.TextureLoader">
            <summary>
            Utility class responsible for decoding and loading image files
            </summary>
        </member>
        <member name="F:Walgelijk.TextureLoader.Settings">
            <summary>
            Default import settings
            </summary>
        </member>
        <member name="F:Walgelijk.TextureLoader.Decoders">
            <summary>
            List of image decoders. This list is walked through for every image that is loaded, from top to bottom. You can manipulate this list in any way you like.
            </summary>
        </member>
        <member name="M:Walgelijk.TextureLoader.FromFile(System.String,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Loads texture from file
            </summary>
        </member>
        <member name="M:Walgelijk.TextureLoader.FromBytes(System.ReadOnlySpan{System.Byte},System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Loads texture from file
            </summary>
        </member>
        <member name="T:Walgelijk.ImportSettings">
            <summary>
            Import settings options
            </summary>
        </member>
        <member name="F:Walgelijk.ImportSettings.FilterMode">
            <summary>
            The filter mode to set by default
            </summary>
        </member>
        <member name="F:Walgelijk.ImportSettings.WrapMode">
            <summary>
            The wrap mode to set by default
            </summary>
        </member>
        <member name="F:Walgelijk.ImportSettings.HDR">
            <summary>
            The HDR flag value by default. <b>This is not applicable currently because the decoder can't read HDRIs yet</b>
            </summary>
        </member>
        <member name="F:Walgelijk.ImportSettings.GenerateMipMaps">
            <summary>
            Whether or not to generate mip maps by default
            </summary>
        </member>
        <member name="T:Walgelijk.IImageDecoder">
            <summary>
            Interface for decoders used by the <see cref="T:Walgelijk.TextureLoader"/>
            </summary>
        </member>
        <member name="M:Walgelijk.IImageDecoder.Decode(System.ReadOnlySpan{System.Byte}@,System.Boolean)">
            <summary>
            Decode the given byte array and return a flattened 2D pixel grid. Throws an exception if the image can't be loaded.
            </summary>
        </member>
        <member name="M:Walgelijk.IImageDecoder.Decode(System.Byte[]@,System.Int32,System.Boolean)">
            <summary>
            Decode the given byte array and return a flattened 2D pixel grid. Throws an exception if the image can't be loaded.
            </summary>
        </member>
        <member name="M:Walgelijk.IImageDecoder.CanDecode(System.String@)">
            <summary>
            Returns true for files this decoder can decode based on their filename
            </summary>
        </member>
        <member name="M:Walgelijk.IImageDecoder.CanDecode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Returns true for files this decoder can decode based on its raw data
            </summary>
        </member>
        <member name="T:Walgelijk.DecodedImage">
            <summary>
            Returned by an image decoder
            </summary>
        </member>
        <member name="T:Walgelijk.FilterMode">
            <summary>
            Filter mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Nearest">
            <summary>
            Nearest pixel sampling. Results in pixelated images
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Linear">
            <summary>
            Linear pixel interpolation. Results in somewhat smooth images
            </summary>
        </member>
        <member name="T:Walgelijk.GraphicsExtensions">
            <summary>
            Extension methods for all implementations of <see cref="T:Walgelijk.IGraphics"/>
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.BlitFullscreenQuad(Walgelijk.IGraphics,Walgelijk.IReadableTexture,Walgelijk.RenderTarget,System.Int32,System.Int32,Walgelijk.Material,System.String)">
            <summary>
            Blit the <paramref name="src"/> content to <paramref name="dst"/> using a fullscreen quad and the given material
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.DrawQuadScreenspace(Walgelijk.IGraphics,Walgelijk.Rect,Walgelijk.Material)">
            <summary>
            Just draw a screen space quad
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.DrawQuad(Walgelijk.IGraphics,Walgelijk.Rect,Walgelijk.Material)">
            <summary>
            Just draw a quad
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.DrawTextScreenspace(Walgelijk.IGraphics,System.ReadOnlySpan{System.Char},System.Numerics.Vector2,Walgelijk.TextMeshGenerator,Walgelijk.VertexBuffer,Walgelijk.Material)">
            <summary>
            Just draw screen space text
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.ActOnTarget(Walgelijk.IGraphics,Walgelijk.RenderTarget,System.Action{Walgelijk.IGraphics})">
            <summary>
            Perform some actions on a render target without having to set <see cref="P:Walgelijk.IGraphics.CurrentTarget"/> manually
            </summary>
        </member>
        <member name="T:Walgelijk.IGraphics">
            <summary>
            Graphics utility interface meant to be implemented by the rendering implementation
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Clear(Walgelijk.Color)">
            <summary>
            Clear current target
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Draw``1(Walgelijk.VertexBuffer{``0},Walgelijk.Material)">
            <summary>
            Draw a vertex buffer to the currently activated target
            </summary>
            <param name="vertexBuffer">VertexBuffer to draw</param>
            <param name="material">Material to draw it with</param>
        </member>
        <member name="M:Walgelijk.IGraphics.DrawInstanced``1(Walgelijk.VertexBuffer{``0},System.Int32,Walgelijk.Material)">
            <summary>
            Draw a instanced vertex buffer to the currently activated target
            </summary>
            <param name="vertexBuffer">VertexBuffer to draw</param>
            <param name="instanceCount">Amount of elements to draw</param>
            <param name="material">Material to draw it with</param>
        </member>
        <member name="M:Walgelijk.IGraphics.SetUniform``1(Walgelijk.Material,System.String,``0)">
            <summary>
            Set a shader program uniform
            </summary>
        </member>
        <member name="P:Walgelijk.IGraphics.DrawBounds">
            <summary>
            Drawing bounds settings 
            </summary>
        </member>
        <member name="P:Walgelijk.IGraphics.CurrentTarget">
            <summary>
            Set or get the currently active target
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Delete(System.Object)">
            <summary>
            Delete an object from the GPU by its CPU representation
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Upload(System.Object)">
            <summary>
            Forcibly upload an object to the GPU if supported. Won't do anything if the object was already there.
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Delete``1(Walgelijk.VertexBuffer{``0})">
            <summary>
            Delete a VB from the GPU by its CPU representation
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Upload``1(Walgelijk.VertexBuffer{``0})">
            <summary>
            Forcibly upload a VB to the GPU if supported. Won't do anything if the VB was already there.
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.SaveTexture(System.IO.FileStream,Walgelijk.IReadableTexture)">
            <summary>
            Save a texture to disk as a PNG
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.TryGetId(Walgelijk.RenderTexture,System.Int32@,System.Int32[]@)">
            <summary>
            Try to get the ID of the given graphics object. 
            Returns false if the given object could not be found, true otherwise.
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.TryGetId(Walgelijk.IReadableTexture,System.Int32@)">
            <summary>
            Try to get the ID of the given graphics object. 
            Returns false if the given object could not be found, true otherwise.
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.TryGetId``1(Walgelijk.VertexBuffer{``0},System.Int32@,System.Int32@,System.Int32@,System.Int32[]@)">
            <summary>
            Try to get the ID of the given graphics object. 
            <paramref name="vertexAttributeIds"/> expects an array of integers. It will be filled with the extra attribute IDs if they exist.
            Returns -1 if the given object could not be found, otherwise it returns the amount of extra vertex attribute IDs (clamped to the lenghth of the given array if applicable).
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.TryGetId(Walgelijk.Material,System.Int32@)">
            <summary>
            Try to get the ID of the given graphics object. 
            Returns false if the given object could not be found, true otherwise.
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Blit(Walgelijk.RenderTexture,Walgelijk.RenderTexture)">
            <summary>
            Blit a <see cref="T:Walgelijk.RenderTexture"/> onto another
            </summary>
        </member>
        <member name="P:Walgelijk.IGraphics.Stencil">
            <summary>
            Access the stencil buffer state
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.SampleTexture(Walgelijk.IReadableTexture,System.Int32,System.Int32)">
            <summary>
            Get a colour from a texture at a given coordinate in texture space
            </summary>
            <param name="tex"></param>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.IReadableTexture">
            <summary>
            A texture that can be written to
            </summary>
        </member>
        <member name="M:Walgelijk.IReadableTexture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get a pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.IReadableTexture.ReadPixels">
            <summary>
            Get an immutable array of all pixels
            </summary>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Width">
            <summary>
            Width of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Height">
            <summary>
            Height of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Size">
            <summary>
            Size of the image. This returns a <see cref="T:System.Numerics.Vector2"/> with <see cref="P:Walgelijk.IReadableTexture.Width"/> and <see cref="P:Walgelijk.IReadableTexture.Height"/>
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.WrapMode">
            <summary>
            Wrap mode
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.FilterMode">
            <summary>
            Filter mode. Determines how pixels are interpolated between
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.HDR">
            <summary>
            Whether the texture can store HDR image data
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.GenerateMipmaps">
            <summary>
            Whether the texture has generated mipmaps upon load
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.NeedsUpdate">
            <summary>
            Whether or not the renderer needs to send new information to the GPU
            </summary>
        </member>
        <member name="T:Walgelijk.IVertexBuffer">
            <summary>
            Provides functions that are common to all vertex buffers and required for the graphics backend
            </summary>
        </member>
        <member name="M:Walgelijk.IVertexBuffer.GetVerticesMemoryHandle">
            <summary>
            Returns a <see cref="T:System.Buffers.MemoryHandle"/> to the contiguous block of memory that stores all vertices, whatever type they may be
            </summary>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.IVertexBuffer.VertexCount">
            <summary>
            Amount of vertices
            </summary>
        </member>
        <member name="P:Walgelijk.IVertexBuffer.Descriptor">
            <summary>
            The descriptor that provides functions to describe the vertex object to the graphics backend
            </summary>
        </member>
        <member name="T:Walgelijk.IVertexDescriptor">
            <summary>
            Provides a function that returns all specified attribute arrays of a vertex
            </summary>
        </member>
        <member name="M:Walgelijk.IVertexDescriptor.GetAttributes">
            <summary>
            Get all attributes of this vertex in the correct order
            </summary>
        </member>
        <member name="T:Walgelijk.Material">
            <summary>
            Object that holds unique information specific to a shader
            </summary>
        </member>
        <member name="P:Walgelijk.Material.Shader">
            <summary>
            The shader this material uses
            </summary>
        </member>
        <member name="P:Walgelijk.Material.BlendMode">
            <summary>
            Blend mode to use for this material
            </summary>
        </member>
        <member name="P:Walgelijk.Material.StencilState">
            <summary>
            Optional stencil state to set before drawing this material. If null, it will retain the previous stencil state.
            </summary>
        </member>
        <member name="P:Walgelijk.Material.DepthTested">
            <summary>
            Depth testing mode. If true, the fragments will undergo depth testing. If false, they will ignore the depth buffer. If the target does not have a depth buffer, this value will have no effect.
            </summary>
        </member>
        <member name="P:Walgelijk.Material.BackfaceCulling">
            <summary>
            The back-facing faces will be culled if this is true
            </summary>
        </member>
        <member name="F:Walgelijk.Material.InternalUniforms">
            <summary>
            Access the CPU side copy of the uniforms. Only use if you know what you're doing
            </summary>
        </member>
        <member name="M:Walgelijk.Material.#ctor(Walgelijk.Shader)">
            <summary>
            Create a material with a shader
            </summary>
            <param name="shader"></param>
        </member>
        <member name="M:Walgelijk.Material.#ctor">
            <summary>
            New instance of the default shader
            </summary>
        </member>
        <member name="M:Walgelijk.Material.#ctor(Walgelijk.Material)">
            <summary>
            New instance of an existing material. T
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,Walgelijk.IReadableTexture)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Int32)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Single)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Double)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Vector2)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Vector3)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Vector4)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Matrix4x4)">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Int32[])">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Single[])">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Double[])">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Vector3[])">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Numerics.Matrix4x4[])">
            <summary>
            Set uniform data
            </summary>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,Walgelijk.IReadableTexture@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Int32@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Single@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Double@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Vector2@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Vector3@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Vector4@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Matrix4x4@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Int32[]@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Single[]@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Double[]@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Vector3[]@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Numerics.Matrix4x4[]@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.HasUniform(System.String)">
            <summary>
            Returns whether a uniform with the given name has been registered in the material
            </summary>
        </member>
        <member name="P:Walgelijk.Material.DefaultTextured">
            <summary>
            The default material with the default shader. This material is shared.
            </summary>
        </member>
        <member name="M:Walgelijk.Material.CreateSingleColour(Walgelijk.Color)">
            <summary>
            Creates a new material that just renders the single colour
            </summary>
        </member>
        <member name="T:Walgelijk.Primitive">
            <summary>
            Ways to deal with vertices
            </summary>
        </member>
        <member name="T:Walgelijk.PrimitiveMeshes">
            <summary>
            Static class that holds primitive <see cref="T:Walgelijk.VertexBuffer"/> instances. Use these instances instead of creating new ones.
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.CenteredQuad">
            <summary>
            Unit quad where (0, 0) is the center
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Quad">
            <summary>
            Unit quad where (0, 0) is the bottom left
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.RightAngledTriangle">
            <summary>
            Right angled triangle where (0, 0) is the bottom left. Has a height of 1, a width of , and a hypotenuse of 1.414213562373095 or sqrt(2). 
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.IsoscelesTriangle">
            <summary>
            Isosceles triangle where (0, 0) is the bottom left. Has a height of 1 and a width of 1. 
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Line">
            <summary>
            A line segment from (0, 0) to (1, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Circle">
            <summary>
            A unit circle primitive with 33 vertices
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Circle64">
            <summary>
            A unit circle primitive with 65 vertices
            </summary>
        </member>
        <member name="M:Walgelijk.PrimitiveMeshes.GenerateCircle(System.Int32,System.Single)">
            <summary>
            Generates a centered circle vertex buffer
            </summary>
        </member>
        <member name="M:Walgelijk.PrimitiveMeshes.GenerateQuad(Walgelijk.Vertex[],System.UInt32[],Walgelijk.Rect@,System.Int32)">
            <summary>
            Generate quad into the given arrays. Offset is the per-quad offset which is 4 for vertices and 6 for indices
            </summary>
        </member>
        <member name="T:Walgelijk.ActionRenderTask">
            <summary>
            Render task that will invoke the action you give. Useful for unique smaller actions
            </summary>
        </member>
        <member name="M:Walgelijk.ActionRenderTask.#ctor(System.Action{Walgelijk.IGraphics})">
            <summary>
            Crate action render task
            </summary>
        </member>
        <member name="F:Walgelijk.ActionRenderTask.Action">
            <summary>
            The action to invoke
            </summary>
        </member>
        <member name="T:Walgelijk.CameraRenderTask">
            <summary>
            Render task that sets the appropriate matrices to match a camera
            </summary>
        </member>
        <member name="F:Walgelijk.CameraRenderTask.View">
            <summary>
            View matrix
            </summary>
        </member>
        <member name="F:Walgelijk.CameraRenderTask.Projection">
            <summary>
            Projection matrix
            </summary>
        </member>
        <member name="T:Walgelijk.ClearRenderTask">
            <summary>
            Task that clears the target
            </summary>
        </member>
        <member name="P:Walgelijk.ClearRenderTask.ClearColor">
            <summary>
            The colour to clear the target with
            </summary>
        </member>
        <member name="T:Walgelijk.DrawBoundsTask">
            <summary>
            Render task that will set the drawing bounds settings
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBoundsTask.DrawBounds">
            <summary>
            Draw bounds settings to set
            </summary>
        </member>
        <member name="M:Walgelijk.DrawBoundsTask.#ctor(Walgelijk.DrawBounds)">
            <summary>
            Create an instance with the given draw bounds settings
            </summary>
            <param name="drawBounds"></param>
        </member>
        <member name="F:Walgelijk.DrawBoundsTask.DisableDrawBoundsTask">
            <summary>
            Task that disabled the drawbounds. This instance is <b>shared</b> and should not be changed.
            </summary>
        </member>
        <member name="T:Walgelijk.GroupRenderTask">
            <summary>
            An ordered group of render tasks that should always be executed together
            </summary>
        </member>
        <member name="F:Walgelijk.GroupRenderTask.Tasks">
            <summary>
            The group of render tasks
            </summary>
        </member>
        <member name="T:Walgelijk.InstancedShapeRenderTask">
            <summary>
            Render task that renders an instanced vertex buffer with a material
            </summary>
        </member>
        <member name="M:Walgelijk.InstancedShapeRenderTask.#ctor(Walgelijk.VertexBuffer,System.Numerics.Matrix3x2,Walgelijk.Material)">
            <summary>
            Create a shape render task
            </summary>
        </member>
        <member name="F:Walgelijk.InstancedShapeRenderTask.InstanceCount">
            <summary>
            Amount of instances 
            </summary>
        </member>
        <member name="T:Walgelijk.IRenderTask">
            <summary>
            A task that can be queued in the render queue
            </summary>
        </member>
        <member name="M:Walgelijk.IRenderTask.Execute(Walgelijk.IGraphics)">
            <summary>
            Execute the render task on the given render target
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeRenderTask">
            <summary>
            Render task that renders a vertex buffer with a material
            </summary>
        </member>
        <member name="M:Walgelijk.ShapeRenderTask.#ctor(Walgelijk.VertexBuffer,System.Numerics.Matrix3x2,Walgelijk.Material)">
            <summary>
            Create a shape render task
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.ModelMatrix">
            <summary>
            The matrix to transform the vertices with
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.VertexBuffer">
            <summary>
            Vertex buffer to draw
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.ScreenSpace">
            <summary>
            Should the task set the view matrix to <see cref="P:System.Numerics.Matrix4x4.Identity"/> 
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.TintUniform">
            <summary>
            The uniform to set to the sprite texture
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeRenderTask.Color">
            <summary>
            Sets the <see cref="F:Walgelijk.ShapeRenderTask.TintUniform"/> uniform before rendering. If null, does nothing.
            </summary>
        </member>
        <member name="M:Walgelijk.ShapeRenderTask.Execute(Walgelijk.IGraphics)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.ShapeRenderTask.Draw(Walgelijk.IGraphics)">
            <inheritdoc/>
        </member>
        <member name="T:Walgelijk.SpriteRenderTask">
            <summary>
            Render task that renders a quad with a given model matrix, material, and texture. The texture is set each time it is executed.
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.Texture">
            <summary>
            The sprite texture to render
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.MainTextureUniform">
            <summary>
            The uniform to set to the sprite texture
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.TintUniform">
            <summary>
            The uniform to set to the sprite texture
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.ModelMatrix">
            <summary>
            The matrix to transform the vertices with
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="F:Walgelijk.SpriteRenderTask.ScreenSpace">
            <summary>
            Should the task set the view matrix to <see cref="P:System.Numerics.Matrix4x4.Identity"/> 
            </summary>
        </member>
        <member name="P:Walgelijk.SpriteRenderTask.Color">
            <summary>
            Sets the <see cref="F:Walgelijk.SpriteRenderTask.TintUniform"/> uniform before rendering. If null, does nothing.
            </summary>
        </member>
        <member name="M:Walgelijk.SpriteRenderTask.#ctor(Walgelijk.IReadableTexture,System.Numerics.Matrix3x2,Walgelijk.Material)">
            <summary>
            Create a sprite render task
            </summary>
        </member>
        <member name="M:Walgelijk.SpriteRenderTask.Execute(Walgelijk.IGraphics)">
            <inheritdoc/>
        </member>
        <member name="M:Walgelijk.SpriteRenderTask.Draw(Walgelijk.IGraphics)">
            <inheritdoc/>
        </member>
        <member name="T:Walgelijk.TargetRenderTask">
            <summary>
            Task that sets the active render target
            </summary>
        </member>
        <member name="P:Walgelijk.TargetRenderTask.Target">
            <summary>
            The target to set
            </summary>
        </member>
        <member name="T:Walgelijk.RenderOrder">
            <summary>
            Simple stucture that holds data for the layer system
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.Layer">
            <summary>
            The main layer to draw on
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.OrderInLayer">
            <summary>
            The order within <see cref="F:Walgelijk.RenderOrder.Layer"/> to draw on
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a rendering order structure
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.WithOrder(System.Int32)">
            <summary>
            Return a <see cref="T:Walgelijk.RenderOrder"/> on the same layer, but with the given order
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.RenderOrder.OffsetLayer(System.Int32)">
            <summary>
            Return a copy of this RenderOrder with the layer offset by the given amount
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.OffsetOrder(System.Int32)">
            <summary>
            Return a copy of this RenderOrder with the order offset by the given amount
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.Offset(System.Int32,System.Int32)">
            <summary>
            Return a copy of this RenderOrder with both the layer and order offset by the given amount
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.Zero">
            <summary>
            The default render order. (0, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.CameraOperations">
            <summary>
            The render order where camera operations are executed (-10000, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.UI">
            <summary>
            The render order where UI is drawn (10000, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.DebugUI">
            <summary>
            The render order where debugging UI is drawn (10001, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.Bottom">
            <summary>
            The minimum render order (<see cref="F:System.Int32.MinValue"/>, <see cref="F:System.Int32.MinValue"/>)
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.Top">
            <summary>
            The maximum render order (<see cref="F:System.Int32.MaxValue"/>, <see cref="F:System.Int32.MaxValue"/>)
            </summary>
        </member>
        <member name="T:Walgelijk.RenderQueue">
            <summary>
            This object manages a render queue of <see cref="T:Walgelijk.IRenderTask"/>
            </summary>
        </member>
        <member name="M:Walgelijk.RenderQueue.RenderAndReset(Walgelijk.IGraphics)">
            <summary>
            Render the queue by dequeuing and executing each entry
            </summary>
        </member>
        <member name="M:Walgelijk.RenderQueue.Add(Walgelijk.IRenderTask,Walgelijk.RenderOrder)">
            <summary>
            Add a task to the queue. The optional order determines when it's going to be executed. Higher values mean later execution.
            </summary>
        </member>
        <member name="P:Walgelijk.RenderQueue.Length">
            <summary>
            Length of the queue
            </summary>
        </member>
        <member name="T:Walgelijk.RenderTarget">
            <summary>
            A target that can be rendered to
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ViewMatrix">
            <summary>
            The view matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ProjectionMatrix">
            <summary>
            The projection matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ModelMatrix">
            <summary>
            The model matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.Size">
            <summary>
            Size of the target.
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.AspectRatio">
            <summary>
            Calculate the aspect ratio from the current render target size. Identical to Size.Y / Size.X
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.OrthographicMatrix">
            <summary>
            An orthographic projection matrix where the top left is 0,0 and the bottom right is <see cref="P:Walgelijk.RenderTarget.Size"/>
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTarget.UvMatrix">
            <summary>
            An orthographic projection matrix where the top left is 0,0 and the bottom right is 1, 1
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.Flags">
            <summary>
            This target's enabled features
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTarget.HasFlag(Walgelijk.RenderTargetFlags)">
            <summary>
            Returns true if <see cref="P:Walgelijk.RenderTarget.Flags"/> contains the given flags
            </summary>
        </member>
        <member name="T:Walgelijk.RenderTargetFlags">
            <summary>
            Render target features
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.None">
            <summary>
            Nothing special
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.Depth">
            <summary>
            Has a depth and stencil buffer
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.DepthStencil">
            <summary>
            Has a depth and stencil buffer
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.HDR">
            <summary>
            Allows HDR values
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.Mipmaps">
            <summary>
            Generates mipmaps
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTargetFlags.Multisampling">
            <summary>
            Multiple samples per pixel (MSAA)
            <b>This flag may cause issues when combined with other flags!</b>
            </summary>
        </member>
        <member name="T:Walgelijk.RenderTexture">
            <summary>
            A render target of an arbitrary size that can be used as a texture
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.#ctor(System.Int32,System.Int32,Walgelijk.WrapMode,Walgelijk.FilterMode,System.Boolean,System.Boolean)">
            <summary>
            Construct a <see cref="T:Walgelijk.RenderTexture"/>
            </summary>
        </member>
        <member name="F:Walgelijk.RenderTexture.DepthBuffer">
            <summary>
            Access to the depth (and stencil) buffer. This is null if <see cref="!:Flags"/> does not contain <see cref="F:Walgelijk.RenderTargetFlags.DepthStencil"/>.
            <b>Note that this buffer may be being written to as you're reading from it, which will cause unsightly graphical artifacts. To be safe, blit the texture to somewhere else to read from!</b>
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTexture.DisposeLocalCopyAfterUpload">
            <summary>
            There is no local copy so this will do nothing.
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Returns <see cref="M:Walgelijk.IGraphics.SampleTexture(Walgelijk.IReadableTexture,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.ReadPixels">
            <summary>
            You can't get all pixels from a RenderTexture. This will return an empty span. 
            Use <see cref="M:Walgelijk.RenderTexture.GetPixel(System.Int32,System.Int32)"/> to sample from this texture.
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.ForceUpdate">
            <summary>
            Force an update
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.Dispose">
            <summary>
            Delete this object from the GPU. This also makes it unusable on the CPU.
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.DisposeLocalCopy">
            <summary>
            There is no local copy so this will do nothing.
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.GetData">
            <summary>
            You can't get pixels from a RenderTexture. This will return a region of zero length.
            </summary>
        </member>
        <member name="T:Walgelijk.Shader">
            <summary>
            Structure that holds the code for a full shader program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.#ctor(System.String,System.String)">
            <summary>
            Create a shader from vertex and fragment shader code
            </summary>
        </member>
        <member name="P:Walgelijk.Shader.VertexShader">
            <summary>
            The vertex shader of the program
            </summary>
        </member>
        <member name="P:Walgelijk.Shader.FragmentShader">
            <summary>
            The fragment shader of the program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.Load(System.String,System.String)">
            <summary>
            Load shader from files
            </summary>
        </member>
        <member name="F:Walgelijk.Shader.Default">
            <summary>
            Default shader. Renders vertex colours and textures.
            </summary>
        </member>
        <member name="T:Walgelijk.ShaderDefaults">
            <summary>
            Useful values for shader related business 
            </summary>
        </member>
        <member name="P:Walgelijk.ShaderDefaults.TexturedFragment">
            <summary>
            Default fragment shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.WorldSpaceVertex">
            <summary>
            Default vertex shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ProjectionMatrixUniform">
            <summary>
            Projection matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ViewMatrixUniform">
            <summary>
            View matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ModelMatrixUniform">
            <summary>
            Model matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.MainTextureUniform">
            <summary>
            Main texture uniform name
            </summary>
        </member>
        <member name="T:Walgelijk.StencilAccessMode">
            <summary>
            Stencil access mode. Defines ways for drawn geometry to interact with the stencil buffer
            </summary>
        </member>
        <member name="F:Walgelijk.StencilAccessMode.NoWrite">
            <summary>
            Only read from the stencil buffer
            </summary>
        </member>
        <member name="F:Walgelijk.StencilAccessMode.Write">
            <summary>
            Write 1 to the stencil buffer
            </summary>
        </member>
        <member name="F:Walgelijk.StencilState.Enabled">
            <summary>
            Is stencil writing/reading enabled at all? If false, the rest of the fields won't do anything.
            </summary>
        </member>
        <member name="F:Walgelijk.StencilState.ShouldClear">
            <summary>
            If true, the stencil buffer will be cleared to all zeroes
            </summary>
        </member>
        <member name="F:Walgelijk.StencilState.AccessMode">
            <summary>
            The current stencil access mode, see <see cref="T:Walgelijk.StencilAccessMode"/>
            </summary>
        </member>
        <member name="P:Walgelijk.StencilState.Disabled">
            <summary>
            Disable stencil testing and writing
            </summary>
        </member>
        <member name="P:Walgelijk.StencilState.Clear">
            <summary>
            Clear the stencil buffer to all zeroes
            </summary>
        </member>
        <member name="P:Walgelijk.StencilState.WriteMask">
            <summary>
            Any geometry drawn will result in 1s on the stencil buffer, i.e determines the mask
            </summary>
        </member>
        <member name="P:Walgelijk.StencilState.InsideMask">
            <summary>
            Fragments will only be drawn if the stencil buffer at that point is 1, i.e inside the mask
            </summary>
        </member>
        <member name="P:Walgelijk.StencilState.OutsideMask">
            <summary>
            Fragments will only be drawn if the stencil buffer at that point is 0, i.e outside the mask
            </summary>
        </member>
        <member name="F:Walgelijk.StencilTestMode.Inside">
            <summary>
            Only draw inside the mask, i.e where the stencil buffer is set to 1
            </summary>
        </member>
        <member name="F:Walgelijk.StencilTestMode.Outside">
            <summary>
            Only draw outside the mask, i.e where the stencil buffer is set to 0
            </summary>
        </member>
        <member name="T:Walgelijk.TexGen">
            <summary>
            Provides texture generation functions
            </summary>
        </member>
        <member name="M:Walgelijk.TexGen.Checkerboard(System.Int32,System.Int32,System.Int32,Walgelijk.Color,Walgelijk.Color)">
            <summary>
            Generate a simple checkerboard texture
            </summary>
        </member>
        <member name="M:Walgelijk.TexGen.Noise(System.Int32,System.Int32,System.Single,System.Single,Walgelijk.Color,Walgelijk.Color)">
            <summary>
            Generate a simple noise texture
            </summary>
        </member>
        <member name="M:Walgelijk.TexGen.Colour(System.Int32,System.Int32,Walgelijk.Color)">
            <summary>
            Generate a flat colour texture
            </summary>
        </member>
        <member name="M:Walgelijk.TexGen.Gradient(System.Int32,System.Int32,Walgelijk.TexGen.GradientType,Walgelijk.Color,Walgelijk.Color)">
            <summary>
            Generate a simple gradient texture
            </summary>
        </member>
        <member name="T:Walgelijk.Texture">
            <summary>
            Represents a texture
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Width">
            <summary>
            Width of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Height">
            <summary>
            Height of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Size">
            <summary>
            Size of the image. This returns a <see cref="T:System.Numerics.Vector2"/> with <see cref="P:Walgelijk.Texture.Width"/> and <see cref="P:Walgelijk.Texture.Height"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.WrapMode">
            <summary>
            Wrap mode
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.FilterMode">
            <summary>
            Filter mode. Determines how pixels are interpolated between
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.GenerateMipmaps">
            <summary>
            Whether the texture has generated mipmaps upon load
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.HDR">
            <summary>
            Whether the texture can store HDR image data
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.NeedsUpdate">
            <summary>
            Whether or not the renderer needs to send new information to the GPU
            </summary>
        </member>
        <member name="F:Walgelijk.Texture.RawData">
            <summary>
            Direct access to the pixel data. This may be null if <see cref="M:Walgelijk.Texture.DisposeLocalCopy"/> was called.
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.#ctor(System.Int32,System.Int32,Walgelijk.Color[],System.Boolean,System.Boolean)">
            <summary>
            Create a texture from a series of pixels
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create an empty texture
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Load an image from a path using <see cref="T:Walgelijk.TextureLoader"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.DisposeLocalCopy">
            <summary>
            Remove the pixels that are stored on CPU memory
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get a pixel
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.SetPixel(System.Int32,System.Int32,Walgelijk.Color)">
            <summary>
            Set a pixel to a colour
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.ForceUpdate">
            <summary>
            Force an update
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.Dispose">
            <summary>
            Delete the texture from the GPU
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.GetData">
            <summary>
            Get an immutable collection of all pixels
            </summary>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.Texture.DisposeLocalCopyAfterUpload">
            <summary>
            Should all pixels be discarded after this object has been uploaded to the GPU?
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.White">
            <summary>
            1x1 texture with a single white pixel
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.ErrorTexture">
            <summary>
            8x8 red-black frowning face texture, usually used to indicate something has gone wrong
            </summary>
        </member>
        <member name="T:Walgelijk.UniformDictionary">
            <summary>
            Dictionary collection for all valid uniform datatypes
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Single)">
            <summary>
            Set or add a float uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Int32)">
            <summary>
            Set or add an int uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Byte)">
            <summary>
            Set or add an int (really. bytes are just converted to ints) uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Double)">
            <summary>
            Set or add a double uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Vector2)">
            <summary>
            Set or add a Vector2 uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Vector3)">
            <summary>
            Set or add a Vector3 uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Vector4)">
            <summary>
            Set or add a Vector4 uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Matrix4x4)">
            <summary>
            Set or add a Matrix4x4 uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,Walgelijk.IReadableTexture)">
            <summary>
            Set or add a IReadableTexture uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Int32[])">
            <summary>
            Set or add an int[] uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Single[])">
            <summary>
            Set or add a float[] uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Double[])">
            <summary>
            Set or add a double[] uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Vector3[])">
            <summary>
            Set or add a Vector3[] uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.SetValue(System.String,System.Numerics.Matrix4x4[])">
            <summary>
            Set or add a Matrix4x4[] uniform
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Byte@)">
            <summary>
            Try to get a byte uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Int32@)">
            <summary>
            Try to get an integer uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Single@)">
            <summary>
            Try to get a float uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Double@)">
            <summary>
            Try to get a double uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Vector2@)">
            <summary>
            Try to get a Vector2 uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Vector3@)">
            <summary>
            Try to get a Vector3 uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Vector4@)">
            <summary>
            Try to get a Vector4 uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Matrix4x4@)">
            <summary>
            Try to get a Matrix4x4 uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,Walgelijk.IReadableTexture@)">
            <summary>
            Try to get a IReadableTexture uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Int32[]@)">
            <summary>
            Try to get an int[] uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Single[]@)">
            <summary>
            Try to get a float[] uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Double[]@)">
            <summary>
            Try to get a double[] uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Vector3[]@)">
            <summary>
            Try to get a Vector3[] uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.TryGetValue(System.String,System.Numerics.Matrix4x4[]@)">
            <summary>
            Try to get a Matrix4x4[] uniform value
            </summary>
        </member>
        <member name="M:Walgelijk.UniformDictionary.ContainsKey(System.String)">
            <summary>
            Does the uniform with the given name exist?
            </summary>
        </member>
        <member name="T:Walgelijk.Vertex">
            <summary>
            The default vertex used by a <see cref="T:Walgelijk.VertexBuffer"/> if no type parameter is provided.
            This vertex is generally useful for 2D and 3D objects but keeps it simple.
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Position">
            <summary>
            Vertex position
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.TexCoords">
            <summary>
            Vertex UV coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Normal">
            <summary>
            Normal vector
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Color">
            <summary>
            Vertex colour
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2,Walgelijk.Color)">
            <summary>
            Create a vertex with a position, UV, and colour
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2,Walgelijk.Color,System.Numerics.Vector3)">
            <summary>
            Create a vertex with a position, UV, colour, and normal
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3)">
            <summary>
            Create a vertex with a position. White and zero UV by default
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a vertex with a position.  White and zero UV by default
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
            <summary>
            Create a vertex with a position and a normal.  White and zero UV by default
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.Descriptor.GetAttributes">
            <inheritdoc/>
        </member>
        <member name="T:Walgelijk.VertexAttributeArray">
            <summary>
            Struct that holds an array and its vertex attribute type as an enum
            </summary>
        </member>
        <member name="P:Walgelijk.VertexAttributeArray.AttributeType">
            <summary>
            Type of data
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeArray.GetAt(System.Int32)">
            <summary>
            Get value at an index
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeArray.SetAt(System.Int32,System.Object)">
            <summary>
            Get value at an index
            </summary>
        </member>
        <member name="P:Walgelijk.VertexAttributeArray.Count">
            <summary>
            Amount of elements
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeArray.GetData``1">
            <summary>
            The raw data arraw
            </summary>
        </member>
        <member name="T:Walgelijk.FloatAttributeArray">
            <summary>
            Float vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.IntAttributeArray">
            <summary>
            Float vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector2AttributeArray">
            <summary>
            Vector2 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector3AttributeArray">
            <summary>
            Vector3 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector4AttributeArray">
            <summary>
            Vector4 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Matrix4x4AttributeArray">
            <summary>
            Matrix4x4 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.VertexAttributeDescriptor">
            <summary>
            Describes a single vertex attribute array. Used to describe individual fields inside a vertex struct
            </summary>
        </member>
        <member name="F:Walgelijk.VertexAttributeDescriptor.Type">
            <summary>
            The data type of the attribute in the vertex struct and the vertex shader
            </summary>
        </member>
        <member name="F:Walgelijk.VertexAttributeDescriptor.ComponentCount">
            <summary>
            The amount of components of this attribute. E.g a <see cref="!:Vector3"/> would have 3 components
            </summary>
        </member>
        <member name="F:Walgelijk.VertexAttributeDescriptor.SizePerComponent">
            <summary>
            The size in bytes of each individual component. E.g a <see cref="!:Vector2"/> has two <see cref="T:System.Single"/> components, which are <c>sizeof(float)</c> bytes long. That means this value would be set to <c>sizeof(float)</c>.
            </summary>
        </member>
        <member name="P:Walgelijk.VertexAttributeDescriptor.TotalSize">
            <summary>
            Identical to <code>SizePerComponent * ComponentCount</code>
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeDescriptor.#ctor(Walgelijk.AttributeType,System.Int32,System.Int32)">
            <summary>
            Manually construct a vertex attribute descriptor. Please just use the <see cref="M:Walgelijk.VertexAttributeDescriptor.#ctor(Walgelijk.AttributeType)"/> constructor
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeDescriptor.#ctor(Walgelijk.AttributeType)">
            <summary>
            Create a vertex attribute descriptor based on the given attribute type
            </summary>
        </member>
        <member name="T:Walgelijk.VertexBuffer`1">
            <summary>
            Holds all the data needed to draw vertices to the screen
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.PrimitiveType">
            <summary>
            The way vertices are drawn
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.#ctor(`0[],System.UInt32[],Walgelijk.IVertexDescriptor,Walgelijk.VertexAttributeArray[])">
            <summary>
            Create a VertexBuffer with the specified vertices and indices
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.#ctor(`0[],Walgelijk.IVertexDescriptor)">
            <summary>
            Create a VertexBuffer with the specified vertices. The indices will be set automatically
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.#ctor">
            <summary>
            Create an empty vertex buffer
            </summary>
        </member>
        <member name="F:Walgelijk.VertexBuffer`1.AmountOfIndicesToRender">
            <summary>
            If non-null, this determines the amount of indices to render. If null, the renderer will fall back to the amount of indices in the <see cref="P:Walgelijk.VertexBuffer`1.Indices"/> array. <b>This should NOT exceed the amount of available indices</b>
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.HasChanged">
            <summary>
            Whether the data needs to be uploaded to the GPU again
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.ExtraDataHasChanged">
            <summary>
            Whether the extra data needs to be uploaded to the GPU again
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.Dynamic">
            <summary>
            Does the vertex data change often?
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.DisposeLocalCopy">
            <summary>
            The local arrays will be cleared and made unusable after upload to the GPU
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.Vertices">
            <summary>
            Vertices to draw. <b>Do not forget to set the corresponding indices, or use <see cref="M:Walgelijk.VertexBuffer`1.GenerateIndices"/></b>
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.Indices">
            <summary>
            Indices to draw vertices by
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.IndexCount">
            <summary>
            Amount of indices
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.VertexCount">
            <summary>
            Amount of vertices
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.ForceUpdate">
            <summary>
            Force the data to be reuploaded to the GPU
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.GenerateIndices">
            <summary>
            Generates indices that simply walk the vertex array from beginning to end
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.FindAttribute(Walgelijk.AttributeType)">
            <summary>
            Find the location of a vertex attribute array with the given type. Returns -1 if nothing is found.
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.GetAttribute(System.Int32)">
            <summary>
            Get a vertex attribute array. Returns null if nothing is found. This is a reference value.
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer`1.GetAttribute``1(System.Int32)">
            <summary>
            Get a vertex attribute array. Returns null if nothing is found. This is a reference value.
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.ExtraAttributeCount">
            <summary>
            Returns the amount of extra attributes. The total amount of attributes equals this value + 3
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer`1.Descriptor">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Walgelijk.VertexBuffer">
            <summary>
            Implements <see cref="T:Walgelijk.VertexBuffer`1"/> with the default <see cref="T:Walgelijk.Vertex"/> struct
            </summary>
        </member>
        <member name="M:Walgelijk.VertexDescriptorExtensions.GetTotalStride(Walgelijk.IVertexDescriptor)">
            <summary>
            Get the total size of the vertex object
            </summary>
        </member>
        <member name="T:Walgelijk.WrapMode">
            <summary>
            Wrap mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Clamp">
            <summary>
            Extends the edge pixels
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Repeat">
            <summary>
            Repeats the UV
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Mirror">
            <summary>
            Mirrors the UV
            </summary>
        </member>
        <member name="T:Walgelijk.ConcurrentCache`2">
            <summary>
            A concurrent version of <see cref="T:Walgelijk.Cache`2"/>. 
            </summary>
            <typeparam name="UnloadedType">The key. This object is usually light and cheap to create</typeparam>
            <typeparam name="LoadedType">The loaded object. This object is usually heavy and expensive to create</typeparam>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.Load(`0)">
            <summary>
            Load or create a <typeparamref name="LoadedType"/> from an <typeparamref name="UnloadedType"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.CreateNew(`0)">
            <summary>
            Determines what must be done when an entirely new <typeparamref name="LoadedType"/> is created
            </summary>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.DisposeOf(`1)">
            <summary>
            Dispose of any resources attached to the loaded type. This is invoked when an entry is unloaded.
            </summary>
            <param name="loaded"></param>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.Unload(`0)">
            <summary>
            Unload an entry and dispose of all attached resources
            </summary>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.Has(`0)">
            <summary>
            Returns if an entry is in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.UnloadAll">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.GetAllLoaded">
            <summary>
            Returns every loaded item in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.GetAllUnloaded">
            <summary>
            Returns every unloaded item ever loaded
            </summary>
        </member>
        <member name="M:Walgelijk.ConcurrentCache`2.GetAll">
            <summary>
            Returns every unloaded item ever loaded
            </summary>
        </member>
        <member name="T:Walgelijk.Cache`2">
            <summary>
            A generic cache object that provides a way to load heavy objects based on a lighter key
            </summary>
            <typeparam name="UnloadedType">The key. This object is usually light and cheap to create</typeparam>
            <typeparam name="LoadedType">The loaded object. This object is usually heavy and expensive to create</typeparam>
        </member>
        <member name="M:Walgelijk.Cache`2.Load(`0)">
            <summary>
            Load or create a <typeparamref name="LoadedType"/> from an <typeparamref name="UnloadedType"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.CreateNew(`0)">
            <summary>
            Determines what must be done when an entirely new <typeparamref name="LoadedType"/> is created
            </summary>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.DisposeOf(`1)">
            <summary>
            Dispose of any resources attached to the loaded type. This is invoked when an entry is unloaded.
            </summary>
            <param name="loaded"></param>
        </member>
        <member name="M:Walgelijk.Cache`2.Unload(`0)">
            <summary>
            Unload an entry and dispose of all attached resources
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.Has(`0)">
            <summary>
            Returns if an entry is in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.UnloadAll">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.GetAllLoaded">
            <summary>
            Returns every loaded item in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.GetAllUnloaded">
            <summary>
            Returns every unloaded item ever loaded
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.GetAll">
            <summary>
            Returns every unloaded item ever loaded
            </summary>
        </member>
        <member name="T:Walgelijk.CircularBuffer`1">
            <summary>
            Basic circular buffer implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Walgelijk.CircularBuffer`1.Capacity">
            <summary>
            Total capacity
            </summary>
        </member>
        <member name="P:Walgelijk.CircularBuffer`1.Position">
            <summary>
            Current position in the buffer
            </summary>
        </member>
        <member name="M:Walgelijk.CircularBuffer`1.Write(`0)">
            <summary>
            Add <paramref name="value"/> to the buffer at <see cref="P:Walgelijk.CircularBuffer`1.Position"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Walgelijk.CircularBuffer`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Add <paramref name="value"/> to the buffer at <see cref="P:Walgelijk.CircularBuffer`1.Position"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Walgelijk.CircularBuffer`1.Read">
            <summary>
            Take value from the buffer at <see cref="P:Walgelijk.CircularBuffer`1.Position"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.ClampedArray`1">
            <summary>
            An array with a fixed capacity that keeps track of how many objects were entered;
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Walgelijk.ClampedArray`1.Insert(System.Int32,`0)">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Walgelijk.ClampedArray`1.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Walgelijk.ClampedArray`1.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Walgelijk.ClampedArray`1.AsSpan">
            <summary>
            Creates a new span over the target array.
            </summary>
        </member>
        <member name="M:Walgelijk.ClampedArray`1.AsSpan(System.Int32,System.Int32)">
            <summary>
            Creates a new Span over the portion of the target array beginning
            at 'start' index and ending at 'end' index (exclusive).
            </summary>
            <param name="array">The target array.</param>
            <param name="start">The index at which to begin the Span.</param>
            <param name="length">The number of items in the Span.</param>
            <remarks>Returns default when <paramref name="array"/> is null.</remarks>
            <exception cref="T:System.ArrayTypeMismatchException">Thrown when <paramref name="array"/> is covariant and array's type is not exactly T[].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the specified <paramref name="start"/> or end index is not in the range (&lt;0 or &gt;Length).
            </exception>
        </member>
        <member name="T:Walgelijk.Curve`1">
            <summary>
            Linear curve
            </summary>
        </member>
        <member name="P:Walgelijk.Curve`1.Keys">
            <summary>
            Value keys
            </summary>
        </member>
        <member name="F:Walgelijk.Curve`1.MappingFunction">
            <summary>
            Mapping function of the input time value. Regarded as linear if null.
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.#ctor(Walgelijk.Curve{`0}.Key[])">
            <summary>
            Construct a curve and sort the given keys
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.Evaluate(System.Single)">
            <summary>
            Get value at a position in the curve using linear interpolation
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.Lerp(`0,`0,System.Single)">
            <summary>
            Linear interpolation implementation for type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Curve`1.Key">
            <summary>
            Key with a position and value of type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="F:Walgelijk.Curve`1.Key.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Walgelijk.Curve`1.Key.Position">
            <summary>
            Position in range 0, 1
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.Key.#ctor(`0,System.Single)">
            <summary>
            Construct a Key
            </summary>
        </member>
        <member name="T:Walgelijk.FloatCurve">
            <summary>
            <see cref="T:System.Single"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.ColorCurve">
            <summary>
            <see cref="T:Walgelijk.Color"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec4Curve">
            <summary>
            <see cref="T:System.Numerics.Vector4"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec2Curve">
            <summary>
            <see cref="T:System.Numerics.Vector2"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec3Curve">
            <summary>
            <see cref="T:System.Numerics.Vector3"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Easings">
            <summary>
            Utility struct full of easing curve functions
            </summary>
        </member>
        <member name="T:Walgelijk.Easings.Cubic">
            <summary>
            Cubic easing functions
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Cubic.InOut(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in ease-out cubic curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Cubic.In(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in cubic curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Cubic.Out(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-out cubic curve
            </summary>
        </member>
        <member name="T:Walgelijk.Easings.Quad">
            <summary>
            Quadtratic easing functions
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Quad.InOut(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in ease-out quadractic curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Quad.In(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in quadractic curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Quad.Out(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-out quadractic curve
            </summary>
        </member>
        <member name="T:Walgelijk.Easings.Expo">
            <summary>
            Exponential easing functions
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Expo.InOut(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in ease-out exponential curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Expo.In(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in exponential curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Expo.Out(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-out exponential curve
            </summary>
        </member>
        <member name="T:Walgelijk.Easings.Circ">
            <summary>
            Circular easing functions
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Circ.InOut(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in ease-out circular curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Circ.In(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-in circular curve
            </summary>
        </member>
        <member name="M:Walgelijk.Easings.Circ.Out(System.Single)">
            <summary>
            Remaps a linear value from 0 to 1 to an ease-out circular curve
            </summary>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.#ctor(System.Int32)">
            <summary>
            Create new FastNoise object with optional seed
            </summary>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetSeed(System.Int32)">
            <summary>
            Sets seed used for all noise types
            </summary>
            <remarks>
            Default: 1337
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFrequency(System.Single)">
            <summary>
            Sets frequency for all noise types
            </summary>
            <remarks>
            Default: 0.01
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetNoiseType(Walgelijk.Auburn.FastNoiseLite.NoiseType)">
            <summary>
            Sets noise algorithm used for GetNoise(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetRotationType3D(Walgelijk.Auburn.FastNoiseLite.RotationType3D)">
            <summary>
            Sets domain rotation type for 3D Noise and 3D DomainWarp.
            Can aid in reducing directional artifacts when sampling a 2D plane in 3D
            </summary>
            <remarks>
            Default: None
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalType(Walgelijk.Auburn.FastNoiseLite.FractalType)">
            <summary>
            Sets method for combining octaves in all fractal noise types
            </summary>
            <remarks>
            Default: None
            Note: FractalType.DomainWarp... only affects DomainWarp(...)
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalOctaves(System.Int32)">
            <summary>
            Sets octave count for all fractal noise types 
            </summary>
            <remarks>
            Default: 3
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalLacunarity(System.Single)">
            <summary>
            Sets octave lacunarity for all fractal noise types
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalGain(System.Single)">
            <summary>
            Sets octave gain for all fractal noise types
            </summary>
            <remarks>
            Default: 0.5
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalWeightedStrength(System.Single)">
            <summary>
            Sets octave weighting for all none DomainWarp fratal types
            </summary>
            <remarks>
            Default: 0.0
            Note: Keep between 0...1 to maintain -1...1 output bounding
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetFractalPingPongStrength(System.Single)">
            <summary>
            Sets strength of the fractal ping pong effect
            </summary>
            <remarks>
            Default: 2.0
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetCellularDistanceFunction(Walgelijk.Auburn.FastNoiseLite.CellularDistanceFunction)">
            <summary>
            Sets distance function used in cellular noise calculations
            </summary>
            <remarks>
            Default: Distance
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetCellularReturnType(Walgelijk.Auburn.FastNoiseLite.CellularReturnType)">
            <summary>
            Sets return type from cellular noise calculations
            </summary>
            <remarks>
            Default: EuclideanSq
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetCellularJitter(System.Single)">
            <summary>
            Sets the maximum distance a cellular point can move from it's grid position
            </summary>
            <remarks>
            Default: 1.0
            Note: Setting this higher than 1 will cause artifacts
            </remarks> 
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetDomainWarpType(Walgelijk.Auburn.FastNoiseLite.DomainWarpType)">
            <summary>
            Sets the warp algorithm when using DomainWarp(...)
            </summary>
            <remarks>
            Default: OpenSimplex2
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.SetDomainWarpAmp(System.Single)">
            <summary>
            Sets the maximum warp distance from original position when using DomainWarp(...)
            </summary>
            <remarks>
            Default: 1.0
            </remarks>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.GetNoise(System.Single,System.Single)">
            <summary>
            2D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.GetNoise(System.Single,System.Single,System.Single)">
            <summary>
            3D noise at given position using current settings
            </summary>
            <returns>
            Noise output bounded between -1...1
            </returns>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.DomainWarp(System.Single@,System.Single@)">
            <summary>
            2D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y)
            noise = GetNoise(x, y)</code>
            </example>
        </member>
        <member name="M:Walgelijk.Auburn.FastNoiseLite.DomainWarp(System.Single@,System.Single@,System.Single@)">
            <summary>
            3D warps the input position using current domain warp settings
            </summary>
            <example>
            Example usage with GetNoise
            <code>DomainWarp(ref x, ref y, ref z)
            noise = GetNoise(x, y, z)</code>
            </example>
        </member>
        <member name="T:Walgelijk.IExternal`1">
            <summary>
            Objects that have data on the local side that is eventually uploaded somewhere else (usually the GPU)
            </summary>
        </member>
        <member name="M:Walgelijk.IExternal`1.DisposeLocalCopy">
            <summary>
            Remove the copy of the data that is stored locally, usually because it's already been uploaded
            </summary>
        </member>
        <member name="M:Walgelijk.IExternal`1.GetData">
            <summary>
            Get the data. This can be null if it's been disposed.
            </summary>
        </member>
        <member name="P:Walgelijk.IExternal`1.DisposeLocalCopyAfterUpload">
            <summary>
            Should the local copy of this object be disposed after it's been uploaded? 
            </summary>
        </member>
        <member name="T:Walgelijk.Noise">
            <summary>
            Noise utility struct that uses <see cref="T:Walgelijk.Auburn.FastNoiseLite"/> (<u>https://github.com/Auburn/FastNoise</u>) to generate noise
            </summary>
        </member>
        <member name="M:Walgelijk.Noise.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Get value noise with cubic interpolation ranging from -1 to 1
            </summary>
        </member>
        <member name="M:Walgelijk.Noise.GetPerlin(System.Single,System.Single,System.Single)">
            <summary>
            Get Perlin noise ranging from -1 to 1
            </summary>
        </member>
        <member name="M:Walgelijk.Noise.GetSimplex(System.Single,System.Single,System.Single)">
            <summary>
            Get OpenSimplex noise ranging from -1 to 1
            </summary>
        </member>
        <member name="M:Walgelijk.Noise.GetCellular(System.Single,System.Single,System.Single)">
            <summary>
            Get cellular noise ranging from -1 to 1
            </summary>
        </member>
        <member name="M:Walgelijk.Noise.GetFractal(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Get fractal simplex noise ranging from -1 to 1
            </summary>
        </member>
        <member name="T:Walgelijk.Pool`2">
            <summary>
            Abstract class for object pooling
            </summary>
            <typeparam name="T">The type to pool</typeparam>
            <typeparam name="InitialData">The type of object to pass around when initalising a new instance</typeparam>
        </member>
        <member name="F:Walgelijk.Pool`2.MaximumCapacity">
            <summary>
            The maximum amount of objects, active or inactive
            </summary>
        </member>
        <member name="P:Walgelijk.Pool`2.CreatedAmount">
            <summary>
            How many objects have been created
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.GetAllInUse">
            <summary>
            Enumerates through all objects currently in use
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.#ctor(System.Int32)">
            <summary>
            Create a pool with the given capacity
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.RequestObject(`1)">
            <summary>
            Get an object from the pool. This will be ready for use or null, if the pool is at full capacity. 
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.ReturnToPool(`0)">
            <summary>
            Return an object to the pool when it's done, to allow it to be requested again
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.Prefill">
            <summary>
            Create a new available object and add it to the pool, waiting to be used
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.GetExistingFromPool(`1)">
            <summary>
            Get an existing object from the pool guaranteeing never to create a new one. Can return null.
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.CreateFresh">
            <summary>
            Return a completely new instance of the poolable object
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.ResetObjectForNextUse(`0,`1)">
            <summary>
            Reset the given object for its next use
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`2.GetOverCapacityFallback">
            <summary>
            What to return instead of null when the pool is at full capacity
            </summary>
        </member>
        <member name="T:Walgelijk.Pool`1">
            <summary>
            Abstract class for object pooling
            </summary>
            <typeparam name="T">The type to pool</typeparam>
        </member>
        <member name="F:Walgelijk.Pool`1.MaximumCapacity">
            <summary>
            The maximum amount of objects, active or inactive
            </summary>
        </member>
        <member name="P:Walgelijk.Pool`1.CreatedAmount">
            <summary>
            How many objects have been created
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.GetAllInUse">
            <summary>
            Enumerates through all objects currently in use
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.#ctor(System.Int32)">
            <summary>
            Create a pool with the given capacity
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.RequestObject">
            <summary>
            Get an object from the pool. This will be ready for use or null, if the pool is at full capacity. 
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.ReturnToPool(`0)">
            <summary>
            Return an object to the pool when it's done, to allow it to be requested again
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.Prefill">
            <summary>
            Create a new available object and add it to the pool, waiting to be used
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.GetExistingFromPool">
            <summary>
            Get an existing object from the pool guaranteeing never to create a new one. Can return null.
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.CreateFresh">
            <summary>
            Return a completely new instance of the poolable object
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.ResetObjectForNextUse(`0)">
            <summary>
            Reset the given object for its next use
            </summary>
        </member>
        <member name="M:Walgelijk.Pool`1.GetOverCapacityFallback">
            <summary>
            What to return instead of null when the pool is at full capacity
            </summary>
        </member>
        <member name="T:Walgelijk.Range`1">
            <summary>
            Object with a minimum and maximum value
            </summary>
        </member>
        <member name="P:Walgelijk.Range`1.Min">
            <summary>
            Minimum bound
            </summary>
        </member>
        <member name="P:Walgelijk.Range`1.Max">
            <summary>
            Maximum bound
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.#ctor(`0,`0)">
            <summary>
            Construct a <see cref="T:Walgelijk.Range`1"/> with the given range values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Walgelijk.Range`1.#ctor(`0)">
            <summary>
            Construct a <see cref="T:Walgelijk.Range`1"/> where both bounds are identical
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Walgelijk.Range`1.GetRandom">
            <summary>
            Get a random number between <see cref="P:Walgelijk.Range`1.Min"/> and <see cref="P:Walgelijk.Range`1.Max"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.IsInRange(`0)">
            <summary>
            Returns true if a value is within the range, and false otherwise
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.Clamp(`0)">
            <summary>
            Clamps the given value within the range
            </summary>
        </member>
        <member name="T:Walgelijk.FloatRange">
            <summary>
            Object with a minimum and maximum float value
            </summary>
        </member>
        <member name="M:Walgelijk.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Construct a float range
            </summary>
        </member>
        <member name="M:Walgelijk.FloatRange.#ctor(System.Single)">
            <summary>
            Construct a float range
            </summary>
        </member>
        <member name="T:Walgelijk.IntRange">
            <summary>
            Object with a minimum and maximum integer value
            </summary>
        </member>
        <member name="M:Walgelijk.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an integer range
            </summary>
        </member>
        <member name="M:Walgelijk.IntRange.#ctor(System.Int32)">
            <summary>
            Construct an integer range
            </summary>
        </member>
        <member name="T:Walgelijk.Vec2Range">
            <summary>
            Object with a minimum and maximum <see cref="T:System.Numerics.Vector2"/> value
            </summary>
        </member>
        <member name="M:Walgelijk.Vec2Range.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/> range
            </summary>
        </member>
        <member name="M:Walgelijk.Vec2Range.#ctor(System.Numerics.Vector2)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/>  range
            </summary>
        </member>
        <member name="T:Walgelijk.ColorRange">
            <summary>
            Object with a minimum and maximum <see cref="T:Walgelijk.Color"/> value
            </summary>
        </member>
        <member name="M:Walgelijk.ColorRange.#ctor(Walgelijk.Color,Walgelijk.Color)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/> range
            </summary>
        </member>
        <member name="M:Walgelijk.ColorRange.#ctor(Walgelijk.Color)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/>  range
            </summary>
        </member>
        <member name="T:Walgelijk.Rect">
            <summary>
            Simple rectangle structure
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MinX">
            <summary>
            Minimum X point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MinY">
            <summary>
            Minimum Y point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MaxX">
            <summary>
            Maximum X point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MaxY">
            <summary>
            Maximum Y point
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.Width">
            <summary>
            Width of rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.Height">
            <summary>
            Height of rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.TopRight">
            <summary>
            The top right of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.BottomRight">
            <summary>
            The bottom right of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.TopLeft">
            <summary>
            The top left of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.BottomLeft">
            <summary>
            The bottom left of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.Area">
            <summary>
            Equivalent to Width * Height
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.GetCenter">
            <summary>
            Returns the center of the rectangle. Calculated using (min + max) * 0.5
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.SetCenter(System.Numerics.Vector2)">
            <summary>
            Offset the rectangle such that the center is the given point
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.GetSize">
            <summary>
            Returns the size of the rectangle. Calculated using (max - min)
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.GetRandomPoint">
            <summary>
            Returns a random point inside this rectangle
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a rectangle
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Create a rectangle given the center and the size
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.SortComponents">
            <summary>
            Ensures that the Min and Max components are the minimum and maximum respectively.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Rect.SignedDistanceTo(System.Numerics.Vector2)">
            <summary>
            Identical to <see cref="M:Walgelijk.SDF.Rectangle(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Translate(System.Numerics.Vector2)">
            <summary>
            Return a copy of the rectangle but translated by the given amount
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Translate(System.Single,System.Single)">
            <summary>
            Return a copy of the rectangle but translated by the given amount
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.ClampInside(Walgelijk.Rect@)">
            <summary>
            Returns a copy of the rectangle that is clamped inside the given container rectangle, 
            by translating the current rectangle by the necessary offset.
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Expand(System.Single)">
            <summary>
            Return a copy of the rectangle expanded in all directions by the given amount
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.ContainsPoint(System.Numerics.Vector2)">
            <summary>
            Does the rectangle contain the given point?
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.ContainsPoint(System.Numerics.Vector2,System.Single)">
            <summary>
            Does the rectangle, optionally expanded, contain the given point?
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.ContainsRect(Walgelijk.Rect)">
            <summary>
            Does the rectangle contain the given rectangle? Note that if the given rectangle is identical to the instance, this function will return true
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.IntersectsRectangle(Walgelijk.Rect)">
            <summary>
            Does the rectangle overlap with the given rectangle?
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.ClosestPoint(System.Numerics.Vector2)">
            <summary>
            Returns the point on the rectangle that is closest to the given point
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.StretchToContain(System.Numerics.Vector2)">
            <summary>
            This will return a copy of this rectangle that is stretched just enough to contain the given point
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.StretchToContain(Walgelijk.Rect)">
            <summary>
            This will return a copy of this rectangle that is stretched just enough to contain the given rect
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Scale(System.Single)">
            <summary>
            This will return a copy of this rectangle scaled in each direction by the given value ranging, 1 meaning 100%
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Scale(System.Single,System.Single)">
            <summary>
            This will return a copy of this rectangle scaled in each direction by the given value ranging, 1 meaning 100%
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.Intersect(Walgelijk.Rect)">
            <summary>
            Return the rectangle that represents the intersection between this rectangle and the given rectangle
            </summary>
        </member>
        <member name="T:Walgelijk.SDF">
            <summary>
            Utility struct full of SDF functions
            </summary>
        </member>
        <member name="M:Walgelijk.StringExtension.ToByteArray(System.String)">
            <summary>
            Returns an array where each entry is a byte that corresponds to the given string in ASCII
            </summary>
        </member>
        <member name="M:Walgelijk.StringExtension.ToByteArray(System.String,System.Span{System.Byte})">
            <summary>
            Populates an array where each entry is a byte that corresponds to the given string in ASCII
            </summary>
        </member>
        <member name="T:Walgelijk.Utilities">
            <summary>
            Utility struct full of useful functions
            </summary>
        </member>
        <member name="F:Walgelijk.Utilities.RadToDeg">
            <summary>
            Radians to degrees constant ratio
            </summary>
        </member>
        <member name="F:Walgelijk.Utilities.DegToRad">
            <summary>
            Degrees to radians constant ratio
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Hash(System.Single)">
            <summary>
            Shader-style deterministic* random value (0 - 1)
            <br></br>
            <i>* Not strictly deterministic. Different hardware will give different results.</i>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Fract(System.Single)">
            <summary>
            Get the fractional component
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolate between two angles in degrees
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolate between two floats
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(Walgelijk.Rect@,Walgelijk.Rect@,System.Single)">
            <summary>
            Linearly interpolate between two rects
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Linearly interpolate between two colors or 4 dimensional vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Linearly interpolate between two vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Linearly interpolate between two vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomFloat(System.Single,System.Single)">
            <summary>
            Returns a random float in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomPointInCircle(System.Single,System.Single)">
            <summary>
            Returns a random point in a circle
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomInt(System.Int32,System.Int32)">
            <summary>
            Returns a random int in a range (inclusive min, exclusive max)
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomByte">
            <summary>
            Returns a random byte
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomColour(System.Single)">
            <summary>
            Returns a colour where the RGB components are random
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomHue(System.Single,System.Single,System.Single)">
            <summary>
            Returns a colour with a random hue
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomVector2">
            <summary>
            Returns a random Vector2 (x,y ranged -1.0f through 1.0f)
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Utilities.Mod(System.Single,System.Single)">
            <summary>
            Modulus that supports negatives
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.DeltaAngle(System.Single,System.Single)">
            <summary>
            Smallest difference between two angles in degrees
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Return a random entry in a <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return a random entry in a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(``0,``0)">
            <summary>
            Return a random value from the given parameters
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(``0,``0,``0)">
            <summary>
            Return a random value from the given parameters
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(``0,``0,``0,``0)">
            <summary>
            Return a random value from the given parameters
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(``0,``0,``0,``0,``0)">
            <summary>
            Return a random value from the given parameters
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.AngleToVector(System.Single)">
            <summary>
            Returns a normalised <see cref="T:System.Numerics.Vector2"/> corresponding to the given angle in degrees. 
            0° gives (1, 0). 90° gives (0, 1)
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.VectorToAngle(System.Numerics.Vector2)">
            <summary>
            Returns an angle in degrees corresponding to the given normalised <see cref="T:System.Numerics.Vector2"/>. 
            (1, 0) gives 0°. (0, 1) gives 90° 
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RotatePoint(System.Numerics.Vector2,System.Single,System.Numerics.Vector2)">
            <summary>
            Rotate a point around the origin
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Linearly map a value in a range onto another range
            </summary>
            <param name="a1">Source lower bound</param>
            <param name="a2">Source upper bound</param>
            <param name="b1">Destination lower bound</param>
            <param name="b2">Destination upper bound</param>
            <param name="s">The value to remap</param>
            <returns>Remapped value <paramref name="s"/></returns>
        </member>
        <member name="M:Walgelijk.Utilities.MapRange(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Linearly map a value in a range onto another range
            </summary>
            <param name="a1">Source lower bound</param>
            <param name="a2">Source upper bound</param>
            <param name="b1">Destination lower bound</param>
            <param name="b2">Destination upper bound</param>
            <param name="s">The value to remap</param>
            <returns>Remapped value <paramref name="s"/></returns>
        </member>
        <member name="M:Walgelijk.Utilities.ApplyAcceleration(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Apply a constant acceleration to the given 2D position and 2D velocity, considering a time step.
            </summary>
            <param name="acceleration">The acceleration</param>
            <param name="currentPos">The initial position</param>
            <param name="currentVelocity">The initial velocity</param>
            <param name="deltaTime">The time step</param>
            <param name="dampening">Optional dampening parameter (0 - 1)</param>
            <returns>A struct with the new position and new velocity</returns>
        </member>
        <member name="M:Walgelijk.Utilities.ApplyAcceleration(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Apply a constant acceleration to the given 1D position and 1D velocity, considering a time step.
            </summary>
            <param name="acceleration">The acceleration</param>
            <param name="currentPos">The initial position</param>
            <param name="currentVelocity">The initial velocity</param>
            <param name="deltaTime">The time step</param>
            <param name="dampening">Optional dampening parameter (0 - 1)</param>
            <returns>A struct with the new position and new velocity</returns>
        </member>
        <member name="M:Walgelijk.Utilities.LerpDt(System.Single,System.Single)">
            <summary>
            Returns the lerp factor adjusted for the given time step
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(Walgelijk.Rect@,Walgelijk.Rect@,Walgelijk.Rect@,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothAngleApproach(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target angle degrees given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothAngleApproach(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target angle degrees given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector3,System.Numerics.Vector3,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.SmoothApproach(System.Numerics.Vector4,System.Numerics.Vector4,System.Single,System.Single)">
            <summary>
            Smoothly approaches a value to a target value given a speed and dt
            <br></br>
            By luispedrofonseca
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.NanFallback(System.Single,System.Single)">
            <summary>
            Returns the given fallback value (0 by default) if the given input value is NaN
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.NanFallback(System.Numerics.Vector2,System.Single)">
            <summary>
            Returns the given fallback value (0 by default) if the given input value is NaN
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.NanFallback(System.Numerics.Vector3,System.Single)">
            <summary>
            Returns the given fallback value (0 by default) if the given input value is NaN
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.NanFallback(System.Numerics.Vector4,System.Single)">
            <summary>
            Returns the given fallback value (0 by default) if the given input value is NaN
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Snap(System.Single,System.Single)">
            <summary>
            Snap <paramref name="x"/> to a grid of size <paramref name="snapSize"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Snap(System.Int32,System.Int32)">
            <summary>
            Snap <paramref name="x"/> to a grid of size <paramref name="snapSize"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Snap(System.Numerics.Vector2,System.Single)">
            <summary>
            Snap <paramref name="x"/> to a grid of size <paramref name="snapSize"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Snap(System.Numerics.Vector3,System.Single)">
            <summary>
            Snap <paramref name="x"/> to a grid of size <paramref name="snapSize"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.TextEqualsCaseInsensitive(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Are the two given character spans the same, regardless of casing? 
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Smoothstep(System.Single,System.Single,System.Single)">
            <summary>
            Smoothstep function
            </summary>
        </member>
        <member name="T:Walgelijk.ComponentRef`1">
            <summary>
            Represents a reference to a component of type T that is attached to an entity.
            The point of this structure is that it doesn't actually store the component, only an entity and a type parameter.
            This ensures that the ownership of the component remains with the scene and prevents memory leaks and "rogue" components.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
        </member>
        <member name="F:Walgelijk.ComponentRef`1.Entity">
            <summary>
            The entity to which the component is attached.
            </summary>
        </member>
        <member name="M:Walgelijk.ComponentRef`1.#ctor(Walgelijk.Entity)">
            <summary>
            Construct a component reference
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Walgelijk.ComponentRef`1.Get(Walgelijk.Scene)">
            <summary>
            Gets the component of type T attached to the entity from the specified scene.
            </summary>
            <param name="scene">The scene to search for the component.</param>
        </member>
        <member name="M:Walgelijk.ComponentRef`1.TryGet(Walgelijk.Scene,`0@)">
            <summary>
            Gets the component of type T attached to the entity from the specified scene.
            </summary>
            <param name="scene">The scene to search for the component.</param>
            <param name="component">The component. Null if not found.</param>
        </member>
        <member name="M:Walgelijk.ComponentRef`1.IsValid(Walgelijk.Scene)">
            <summary>
            Checks whether the reference is valid in the specified scene.
            </summary>
            <param name="scene">The scene to check for the entity and component.</param>
            <returns>True if the entity exists in the scene and has the component of type T; otherwise, false.</returns>
        </member>
        <member name="T:Walgelijk.CommandAttribute">
            <summary>
            Attribute that registers a command to the command processor registry
            </summary>
        </member>
        <member name="F:Walgelijk.CommandAttribute.HelpString">
            <summary>
            String that is displayed when the command is incorrectly used or when help is requested
            </summary>
        </member>
        <member name="T:Walgelijk.ManualCrashException">
            <summary>
            Throwing this exception from a command invocation will crash the game
            </summary>
        </member>
        <member name="T:Walgelijk.CommandProcessor">
            <summary>
            Object responsible for command processing. Only has static methods.
            </summary>
        </member>
        <member name="M:Walgelijk.CommandProcessor.Execute(System.String,Walgelijk.DebugConsole)">
            <summary>
            Execute the given string as a command
            </summary>
        </member>
        <member name="M:Walgelijk.CommandProcessor.GetAllCommands">
            <summary>
            Get all commands
            </summary>
        </member>
        <member name="M:Walgelijk.CommandProcessor.GetSuggestions(System.ReadOnlySpan{System.Char},System.Span{System.String})">
            <summary>
            Gets the first command that starts with the given string
            </summary>
        </member>
        <member name="T:Walgelijk.CommandResult">
            <summary>
            A struct you can return that the command processor will interpret
            </summary>
        </member>
        <member name="F:Walgelijk.CommandResult.Message">
            <summary>
            Message to return
            </summary>
        </member>
        <member name="F:Walgelijk.CommandResult.Type">
            <summary>
            Message type
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Info(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Info
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Warn(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Warn
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Error(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Error
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.op_Implicit(System.String)~Walgelijk.CommandResult">
            <summary>
            Implicit string conversion
            </summary>
        </member>
        <member name="T:Walgelijk.ConsoleMessageType">
            <summary>
            Type of console message. Used for filtering
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleMessageType.All">
            <summary>
            Shows up regardless of filter
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleMessageType.Debug">
            <summary>
            Debug message
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleMessageType.Info">
            <summary>
            Info message
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleMessageType.Warning">
            <summary>
            Warning message
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleMessageType.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:Walgelijk.ConsoleSessionHistory">
            <summary>
            Writes session commands to disk in a circular buffer.
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleSessionHistory.BufferSize">
            <summary>
            Size of the buffer to write to disk.
            </summary>
        </member>
        <member name="F:Walgelijk.ConsoleSessionHistory.LastSessionCommands">
            <summary>
            The history from last session.
            </summary>
        </member>
        <member name="M:Walgelijk.ConsoleSessionHistory.Add(System.String@)">
            <summary>
            Add input from the console into the buffer.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:Walgelijk.DebugConsole">
            <summary>
            Class that renders and controls the debug console
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.ToggleKey">
            <summary>
            The key that will toggle the console
            </summary>
            
        </member>
        <member name="F:Walgelijk.DebugConsole.IsActive">
            <summary>
            Whether the console is shown and active or not
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.Game">
            <summary>
            The <see cref="P:Walgelijk.DebugConsole.Game"/> this console is associated with
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.IsEatingInput">
            <summary>
            Whether the console is currently eating user input
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.DrawConsoleNotification">
            <summary>
            Briefly draw the most recent console message to the screen even if the console is not open.
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.ScrollOffset">
            <summary>
            Scroll offset of the console
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.Filter">
            <summary>
            Filters what kind of messages will be displayed
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.UI">
            <summary>
            User interface controller
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.CursorPosition">
            <summary>
            Input cursor index
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.CurrentInput">
            <summary>
            Current user input
            </summary>
        </member>
        <member name="M:Walgelijk.DebugConsole.WriteLine(System.ReadOnlySpan{System.Char},Walgelijk.ConsoleMessageType)">
            <summary>
            Print text to the console
            </summary>
        </member>
        <member name="M:Walgelijk.DebugConsole.DetectMessageType(System.ReadOnlySpan{System.Char})">
            <summary>
            Return the <see cref="T:Walgelijk.ConsoleMessageType"/> flags for the given text based on the prefix
            </summary>
        </member>
        <member name="M:Walgelijk.DebugConsole.Clear">
            <summary>
            Clear the console
            </summary>
        </member>
        <member name="T:Walgelijk.Logger">
            <summary>
            Access the logging implementation
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Debug``1(``0@,System.String@)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Log``1(``0@,System.String@)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Warn``1(``0@,System.String@)">
            <summary>
            Log a warning
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Error``1(``0@,System.String@)">
            <summary>
            Log an error
            </summary>
        </member>
        <member name="T:Walgelijk.Profiler">
            <summary>
            Provides performance information
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.FramesPerSecond">
            <summary>
            Amount of frames rendered in the last second
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.DrawQuickProfiler">
            <summary>
            Enables or disables a small debug performance information display
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.#ctor(Walgelijk.Game)">
            <summary>
            Create a profiler for the given game
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Walgelijk.Profiler.Tick">
            <summary>
            Force the profiler to calculate render information.
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.Render">
            <summary>
            Render the quick profiler
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.StartTask(System.String)">
            <summary>
            Start a profiled task with a name
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.EndTask">
            <summary>
            End the ongoing profiled task
            </summary>
            <returns>The amount of time that has passed</returns>
        </member>
        <member name="M:Walgelijk.Profiler.GetProfiledTasks">
            <summary>
            Get all profiled tasks for this frame
            </summary>
        </member>
        <member name="T:Walgelijk.ProfiledTask">
            <summary>
            Structure that holds a task name and relevant time data
            </summary>
        </member>
        <member name="F:Walgelijk.ProfiledTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Walgelijk.ProfiledTask.Duration">
            <summary>
            How long the task took
            </summary>
        </member>
        <member name="T:Walgelijk.FixedIntervalDistributor">
            <summary>
            Class that calculates the amount of times something needs to execute to adhere to a specific rate
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.Rate">
            <summary>
            Preferred rate in Hz
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.MaxRate">
            <summary>
            Maximum allowed ouput rate per frame
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.Interval">
            <summary>
            1.0f / <see cref="P:Walgelijk.FixedIntervalDistributor.Rate"/>
            </summary>
        </member>
        <member name="M:Walgelijk.FixedIntervalDistributor.CalculateCycleCount(System.Single)">
            <summary>
            Calculate the amount of cycles to execute
            </summary>
        </member>
        <member name="T:Walgelijk.Game">
            <summary>
            The link between the scene and the window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Main">
            <summary>
            The last instance that was created
            </summary>
        </member>
        <member name="F:Walgelijk.Game.ExecutableDirectory">
            <summary>
            Path to the directory where the executable is
            </summary>
        </member>
        <member name="F:Walgelijk.Game.AppDataDirectory">
            <summary>
            Path to where any state should be stored
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Console">
            <summary>
            The developer console
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Window">
            <summary>
            Currently active window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Scene">
            <summary>
            Currently active scene
            </summary>
        </member>
        <member name="M:Walgelijk.Game.TrySetCachedScene(Walgelijk.SceneId@)">
            <summary>
            If the scene ID is found in the cache, it is made active. Returns true if found, false if not.
            </summary>
        </member>
        <member name="P:Walgelijk.Game.SceneCache">
            <summary>
            The scene cache keeps <see cref="F:Walgelijk.ScenePersistence.Persist"/> scenes in memory
            </summary>
        </member>
        <member name="P:Walgelijk.Game.RenderQueue">
            <summary>
            Returns the <see cref="T:Walgelijk.RenderQueue"/> that belongs to <see cref="P:Walgelijk.Game.Window"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Game.AudioRenderer">
            <summary>
            The main audio renderer
            </summary>
        </member>
        <member name="P:Walgelijk.Game.DebugDraw">
            <summary>
            Debug drawing utilities
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Profiling">
            <summary>
            The game profiler
            </summary>
        </member>
        <member name="P:Walgelijk.Game.State">
            <summary>
            Game engine state information
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Compositor">
            <summary>
            The frame compositor. This is where post processing effects are applied
            </summary>
        </member>
        <member name="P:Walgelijk.Game.DevelopmentMode">
            <summary>
            When set to true, safety checks will be done at runtime. 
            This will degrade performance and should be turned off in release. <b>True by default</b>
            </summary>
        </member>
        <member name="F:Walgelijk.Game.OnSceneChange">
            <summary>
            Event dispatched when the scene is changed. The new scene is passed to the receivers
            </summary>
        </member>
        <member name="F:Walgelijk.Game.BeforeExit">
            <summary>
            Event dispatched when the game is about to close but hasn't yet done any cleanup
            </summary>
        </member>
        <member name="F:Walgelijk.Game.FixedUpdateRate">
            <summary>
            The fixed update rate in Hz
            </summary>
        </member>
        <member name="F:Walgelijk.Game.UpdateRate">
            <summary>
            The update/render rate in Hz. Uncapped if zero or smaller.
            </summary>
        </member>
        <member name="F:Walgelijk.Game.MaxFixedUpdatesPerFrame">
            <summary>
            The maximum amount of fixed updates per frame
            </summary>
        </member>
        <member name="F:Walgelijk.Game.Logger">
            <summary>
            The logger for the game, also used by <see cref="F:Walgelijk.Game.Logger"/>
            </summary>
        </member>
        <member name="F:Walgelijk.Game.AdditionalLoopEvents">
            <summary>
            Additional events to invoke for every game loop cycle
            </summary>
        </member>
        <member name="M:Walgelijk.Game.#ctor(Walgelijk.Window,Walgelijk.AudioRenderer,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create a game with a window and an optional audio renderer. If the audio renderer is not set, the game won't be able to play any sounds
            </summary>
        </member>
        <member name="M:Walgelijk.Game.Start">
            <summary>
            Start the game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Game.Stop">
            <summary>
            Exit the game
            </summary>
        </member>
        <member name="T:Walgelijk.Hashes">
            <summary>
            Utility struct that provides hashing functions that take a string and return an int
            </summary>
        </member>
        <member name="T:Walgelijk.Hook`1">
            <summary>
            Event that can be dispatched and listened to
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.Dispatch(`0)">
            <summary>
            Dispatch the event to all listeners
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.AddListener(System.Action{`0})">
            <summary>
            Adds the given action to the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.RemoveListener(System.Action{`0})">
            <summary>
            Remove the given action from the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.HasListener(System.Action{`0})">
            <summary>
            Returns if the given action will be invoked when the event is dispatched
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.ClearListeners">
            <summary>
            Clear all listeners
            </summary>
        </member>
        <member name="P:Walgelijk.Hook`1.ListenerCount">
            <summary>
            Amount of listeners
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.op_Addition(Walgelijk.Hook{`0},System.Action{`0})">
            <summary>
            Add new listener
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.op_Subtraction(Walgelijk.Hook{`0},System.Action{`0})">
            <summary>
            Remove listener
            </summary>
        </member>
        <member name="T:Walgelijk.Hook">
            <summary>
            Event that can be dispatched and listened to
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.Dispatch">
            <summary>
            Dispatch the event to all listeners
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.AddListener(System.Action)">
            <summary>
            Adds the given action to the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.RemoveListener(System.Action)">
            <summary>
            Remove the given action from the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.HasListener(System.Action)">
            <summary>
            Returns if the given action will be invoked when the event is dispatched
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.ClearListeners">
            <summary>
            Clear all listeners
            </summary>
        </member>
        <member name="P:Walgelijk.Hook.ListenerCount">
            <summary>
            Amount of listeners
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.op_Addition(Walgelijk.Hook,System.Action)">
            <summary>
            Add new listener
            </summary>
        </member>
        <member name="M:Walgelijk.Hook.op_Subtraction(Walgelijk.Hook,System.Action)">
            <summary>
            Remove listener
            </summary>
        </member>
        <member name="T:Walgelijk.IGameLoopEvent">
            <summary>
            Receives an update for every game loop cycle
            </summary>
        </member>
        <member name="T:Walgelijk.NameGenerator">
            <summary>
            Very basic random name generator
            </summary>
        </member>
        <member name="T:Walgelijk.ResourceRef`1">
            <summary>
            A resource by key reference. Ensures reimporting is properly handled. Can be returned by the Resources system.
            </summary>
        </member>
        <member name="F:Walgelijk.ResourceRef`1.Id">
            <summary>
            Resource ID
            </summary>
        </member>
        <member name="P:Walgelijk.ResourceRef`1.File">
            <summary>
            File this resource represents
            </summary>
        </member>
        <member name="P:Walgelijk.ResourceRef`1.Value">
            <summary>
            Get the resource
            </summary>
        </member>
        <member name="M:Walgelijk.ResourceRef`1.Reimport">
            <summary>
            Unload the resource to force it to be reloaded
            </summary>
        </member>
        <member name="T:Walgelijk.Resources">
            <summary>
            Global file based resource storage
            </summary>
        </member>
        <member name="E:Walgelijk.Resources.OnStartLoad">
            <summary>
            Event invoked when a resource has been requested
            </summary>
        </member>
        <member name="P:Walgelijk.Resources.BasePath">
            <summary>
            Base path of all resource requests
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Initialise">
            <summary>
            Initialise 
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Load``1(System.Int32)">
            <summary>
            Load a resource directly by ID. Use <see cref="M:Walgelijk.Resources.GetID(System.String)"/> to get the ID for a given file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Walgelijk.Resources.LoadRef``1(System.String,System.Boolean)">
            <summary>
            Load a <see cref="T:Walgelijk.ResourceRef`1"/> at the given path.
            The advantage this offers over <see cref="M:Walgelijk.Resources.Load``1(System.String,System.Boolean)"/> is that a <see cref="T:Walgelijk.ResourceRef`1"/> doesn't actually store the resource, 
            but only the ID and a helper function to retrieve the resource.
            This improves support for unloading and hotloading.
            </summary>
            <typeparam name="T">The type of the object to load</typeparam>
            <param name="path">The path of the file</param>
            <param name="ignoreBasePaths">Whether or not to ignore any set base paths. Default is false</param>
        </member>
        <member name="M:Walgelijk.Resources.Load``1(System.String,System.Boolean)">
            <summary>
            Load the resource at the given path. Will throw an exception if there is no resource loader found for the type, or if the file at the path is not of the given type.
            </summary>
            <typeparam name="T">The type of the object to load</typeparam>
            <param name="path">The path of the file</param>
            <param name="ignoreBasePaths">Whether or not to ignore any set base paths. Default is false</param>
        </member>
        <member name="M:Walgelijk.Resources.GetPathAssociatedWith(System.Object)">
            <summary>
            Return the full path to a resource. Returns null if it could not be found.
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.ParseFullPathForType``1(System.String)">
            <summary>
            Get the full path for a path, considering its type and set base paths
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.GetAllIDs">
            <summary>
            Returns all IDs without duplicates
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.GetID(System.String)">
            <summary>
            Returns the ID for the object at the given path. 
            This function does not take any of the base paths into account. 
            You can provide absolute paths or paths relative to the game executable.
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.GetFileFromID(System.Int32)">
            <summary>
            Returns the <see cref="T:System.IO.FileInfo"/> associated with the resource id
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.TryGetBasePathForType(System.Type,System.String@)">
            <summary>
            Gets the base path for a specific type <b>without the BasePath</b>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.SetBasePathForType(System.Type,System.String)">
            <summary>
            Sets the base path for a specific type. This will be combined with the <see cref="P:Walgelijk.Resources.BasePath"/> and the input path to create the full path
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.SetBasePathForType``1(System.String)">
            <summary>
            Sets the base path for a specific type. This will be combined with the <see cref="P:Walgelijk.Resources.BasePath"/> and the input path to create the full path. This method is the generic version of <see cref="M:Walgelijk.Resources.SetBasePathForType(System.Type,System.String)"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.CanLoad(System.Type)">
            <summary>
            Returns if the resource manager can load objects of the given type
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.RegisterType(System.Type,System.Func{System.String,System.Object})">
            <summary>
            Register a resource type with its loader
            </summary>
            <param name="type">Type of the resource</param>
            <param name="loadFunction">The function that returns the object given a path</param>
            <returns>Whether the registration succeeded</returns>
        </member>
        <member name="M:Walgelijk.Resources.Unload(System.Int32)">
            <summary>
            Unloads an asset. Removes it from the cache and also disposes of it if it implements <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Unload(System.String)">
            <summary>
            Unloads an asset. Removes it from the cache and also disposes of it if it implements <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Unload``1(``0)">
            <summary>
            Unloads an asset. Removes it from the cache and also disposes of it if it implements <see cref="T:System.IDisposable"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.UnloadAll">
            <summary>
            Unloads everything
            </summary>
        </member>
        <member name="T:Walgelijk.RoutineScheduler">
            <summary>
            Routines are like Unity coroutines.<br></br>
            These are <b>NOT</b> threads.<br></br>
            They're not async or parallel, but instead ran on the main thread.
            </summary>
        </member>
        <member name="M:Walgelijk.RoutineScheduler.Start(System.Collections.Generic.IEnumerator{Walgelijk.IRoutineCommand})">
            <summary>
            Start a routine.
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.RoutineScheduler.Stop(Walgelijk.Routine)">
            <summary>
            Stop a routine.
            </summary>
            <param name="routine"></param>
        </member>
        <member name="M:Walgelijk.RoutineScheduler.StopAll">
            <summary>
            Stop any and all routines.
            </summary>
        </member>
        <member name="M:Walgelijk.RoutineScheduler.IsOngoing(Walgelijk.Routine)">
            <summary>
            Is this routine running?
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.RoutineScheduler.StepRoutines(System.Single)">
            <summary>
            Runs all the routines.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:Walgelijk.Selection.ISelectable">
            <summary>
            Guarantees a selectable object
            </summary>
        </member>
        <member name="P:Walgelijk.Selection.ISelectable.RaycastOrder">
            <summary>
            Order in the selection stack. The lower this number, the further back it is.
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.ISelectable.ContainsPoint(System.Numerics.Vector2)">
            <summary>
            Returns true if the object contains the point
            </summary>
        </member>
        <member name="P:Walgelijk.Selection.ISelectable.Disabled">
            <summary>
            If this returns true, the object will be ignored by the selection system
            </summary>
        </member>
        <member name="T:Walgelijk.Selection.SelectionManager`1">
            <summary>
            Generic ordered selectable object manager
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.SelectionManager`1.Selectables">
            <summary>
            List of selectables
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.SelectionManager`1.SelectedObject">
            <summary>
            Currently selected object
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.SelectionManager`1.HoveringObject">
            <summary>
            The object that is currently being hovered over
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.UpdateState(System.Numerics.Vector2,System.Boolean)">
            <summary>
            Update the selection manager given a mouse position and whether it is pressed
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.Raycast(System.Numerics.Vector2,`0@)">
            <summary>
            Outputs the first instance of <typeparamref name="T"/> found at the given point. Returns true if successful.
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.GetAllIndicesAt(System.Numerics.Vector2)">
            <summary>
            Get all the selection indices (indices in the <see cref="F:Walgelijk.Selection.SelectionManager`1.Selectables"/> list) that overlap the given point
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.UpdateOrder">
            <summary>
            Should call every time the list changes (something added, something removed)
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.IsSelected(`0)">
            <summary>
            Returns true if the given object is selected
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.IsHovering(`0)">
            <summary>
            Returns true if the mouse position (given in <see cref="M:Walgelijk.Selection.SelectionManager`1.UpdateState(System.Numerics.Vector2,System.Boolean)"/>) is hovering over the given object
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.PullToFront(`0)">
            <summary>
            Pull the given object to the front
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.Select(`0)">
            <summary>
            Select the given object
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.SelectionManager`1.DeselectAll">
            <summary>
            Deselect everything
            </summary>
        </member>
        <member name="T:Walgelijk.Selection.MultiSelectionManager`1">
            <summary>
            Generic ordered selectable object manager
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.MultiSelectionManager`1.Selectables">
            <summary>
            List of selectables
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.MultiSelectionManager`1.SelectedObjects">
            <summary>
            Currently selected object
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.MultiSelectionManager`1.ActiveObject">
            <summary>
            Currently active object
            </summary>
        </member>
        <member name="F:Walgelijk.Selection.MultiSelectionManager`1.HoveringObject">
            <summary>
            The object that is currently being hovered over
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.UpdateState(System.Numerics.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Update the selection manager given a mouse position and whether it is pressed
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.GetAllIndicesAt(System.Numerics.Vector2)">
            <summary>
            Get all the selection indices (indices in the <see cref="F:Walgelijk.Selection.MultiSelectionManager`1.Selectables"/> list) that overlap the given point
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.Raycast(System.Numerics.Vector2,`0@)">
            <summary>
            Outputs the first instance of <typeparamref name="T"/> found at the given point. Returns true if successful.
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.UpdateOrder">
            <summary>
            Should call every time the list changes (something added, something removed)
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.IsSelected(`0)">
            <summary>
            Returns true if the given object is selected
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.IsHovering(`0)">
            <summary>
            Returns true if the mouse position (given in <see cref="!:UpdateState(Vector2, bool)"/>) is hovering over the given object
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.PullToFront(`0)">
            <summary>
            Pull the given object to the front
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.Select(`0,System.Boolean)">
            <summary>
            Select the given object
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.Select(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Select the given objects
            </summary>
        </member>
        <member name="M:Walgelijk.Selection.MultiSelectionManager`1.DeselectAll">
            <summary>
            Deselect everything
            </summary>
        </member>
        <member name="T:Walgelijk.Time">
            <summary>
            Structure that holds frame specific time data
            </summary>
        </member>
        <member name="P:Walgelijk.Time.DeltaTime">
            <summary>
            Returns the amount of seconds that have passed since the last frame
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceLoad">
            <summary>
            Returns the amount of seconds that have passed since the game was launched
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceSceneChange">
            <summary>
            Returns the amount of seconds that have passed since the last scene change
            </summary>
        </member>
        <member name="P:Walgelijk.Time.DeltaTimeUnscaled">
            <summary>
            Returns the amount of seconds that have passed since the last frame, unaffected by <see cref="P:Walgelijk.Time.TimeScale"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceLoadUnscaled">
            <summary>
            Returns the amount of seconds that have passed since the game was launched, unaffected by <see cref="P:Walgelijk.Time.TimeScale"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceSceneChangeUnscaled">
            <summary>
            Returns the amount of seconds that have passed since the last scene change, unaffected by <see cref="P:Walgelijk.Time.TimeScale"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Time.TimeScale">
            <summary>
            Factor by which the time is multiplied
            </summary>
        </member>
        <member name="P:Walgelijk.Time.Interpolation">
            <summary>
            Interpolation weight factor. Between fixed updates, this value will start at 0 and gradually increase until it ends at 1
            </summary>
        </member>
        <member name="P:Walgelijk.Time.FixedInterval">
            <summary>
            Intended amount of time in seconds between fixed updates
            </summary>
        </member>
        <member name="M:Walgelijk.Time.op_Implicit(Walgelijk.Time)~System.Single">
            <summary>
            Returns <see cref="P:Walgelijk.Time.SecondsSinceLoad"/>
            </summary>
        </member>
        <member name="T:Walgelijk.BmFont.BmFontGlyph">
            <summary>
            Structure with font glyph information
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.Identity">
            <summary>
            Character this glyph belongs to
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.X">
            <summary>
            X position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.Y">
            <summary>
            Y position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.Width">
            <summary>
            Width of the glyph in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.Height">
            <summary>
            Height of the glyph in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.XOffset">
            <summary>
            Horizontal offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.YOffset">
            <summary>
            Vertical offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.BmFont.BmFontGlyph.Advance">
            <summary>
            How many pixels to advance the cursor after this glyph
            </summary>
        </member>
        <member name="T:Walgelijk.TextComponent">
            <summary>
            IShapeComponent that holds the information necessary to draw text
            </summary>
        </member>
        <member name="F:Walgelijk.TextComponent.TextMeshGenerator">
            <summary>
            The raw text mesh generator. You can edit this all you want but it's safer to use the properties of the <see cref="T:Walgelijk.TextComponent"/>
            </summary>
        </member>
        <member name="F:Walgelijk.TextComponent.LastGenerationResult">
            <summary>
            The most recently created text mesh generation result.
            </summary>
        </member>
        <member name="M:Walgelijk.TextComponent.#ctor(System.String,Walgelijk.Font)">
            <summary>
            Create a text component
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.String">
            <summary>
            Displayed string. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Font">
            <summary>
            Used font. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Color">
            <summary>
            Text colour. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.ColorInstructions">
            <summary>
            Text colour instructions
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.LocalBoundingBox">
            <summary>
            The bounding box of the text in local coordinates
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.TrackingMultiplier">
            <summary>
            Distance between letters. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.ParseRichText">
            <summary>
            Should the generator parse rich text? Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.WrappingWidth">
            <summary>
            The maximum text width before wrapping. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.VerticalAlignment">
            <summary>
            The vertical text alignment. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.HorizontalAlignment">
            <summary>
            The horizontal text alignment. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.KerningMultiplier">
            <summary>
            Kerning amount multiplier. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.LineHeightMultiplier">
            <summary>
            Distance between each line.  Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="T:Walgelijk.Font">
            <summary>
            Object that holds font information and pages
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Name">
            <summary>
            Display name of the font
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Size">
            <summary>
            Retrieve the point size this font was loaded with
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Bold">
            <summary>
            Retrieve if the font was loaded with the bold style
            </summary>
        </member>
        <member name="F:Walgelijk.Font.Rendering">
            <summary>
            Specifies the rendering method of the font. This determines what shader should be used.
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Italic">
            <summary>
            Retrieve if the font was loaded with the italic style
            </summary>
        </member>
        <member name="P:Walgelijk.Font.LineHeight">
            <summary>
            This is the distance in pixels between each line of text
            </summary>
        </member>
        <member name="P:Walgelijk.Font.XHeight">
            <summary>
            The distance from the baseline to the top of lowercase characters (a.k.a the mean line)
            </summary>
        </member>
        <member name="P:Walgelijk.Font.CapHeight">
            <summary>
            The distance from the baseline to the top of uppercase characters
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Page">
            <summary>
            The texture containing all glyphs
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Glyphs">
            <summary>
            Glyphs by character
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Kernings">
            <summary>
            Kernings by <see cref="T:Walgelijk.KerningPair"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Material">
            <summary>
            Material this font uses. Be aware this may be shared across text. Use <see cref="M:Walgelijk.FontMaterialCreator.CreateFor(Walgelijk.Font)"/> to create a new material.
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetGlyph(System.Char,Walgelijk.Glyph)">
            <summary>
            Get the glyph for a character. 
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Get kerning for two characters
            </summary>
        </member>
        <member name="F:Walgelijk.Font.Default">
            <summary>
            The default font
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Name">
            <summary>
            Name of the font
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Atlas">
            <summary>
            Reference to the atlas texture
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Kernings">
            <summary>
            Kernings between different characters
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Glyphs">
            <summary>
            Set of glyphs in the font
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.LineHeight">
            <summary>
            Height of a line of text in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Size">
            <summary>
            Font size in points
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.XHeight">
            <summary>
            The distance from the baseline to the mean line
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.CapHeight">
            <summary>
            The maximum height of uppercase character
            </summary>
        </member>
        <member name="F:Walgelijk.FontFormat.Style">
            <summary>
            The style this font represents
            </summary>
        </member>
        <member name="T:Walgelijk.FontLoader">
            <summary>
            Loads fonts based on the format that is detected or provided
            </summary>
        </member>
        <member name="T:Walgelijk.FontMaterialCreator">
            <summary>
            Utility struct that provides static text material creation functions
            </summary>
        </member>
        <member name="M:Walgelijk.FontMaterialCreator.CreateFor(Walgelijk.Font)">
            <summary>
            Create a material for a given font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.FontMaterialCreator.CreateBitmapFontMaterial(Walgelijk.IReadableTexture)">
            <summary>
            Create a material for simple bitmap fonts
            </summary>
        </member>
        <member name="M:Walgelijk.FontMaterialCreator.CreateSDFMaterial(Walgelijk.IReadableTexture)">
            <summary>
            Create a material for SDF (signed distance field) fonts
            </summary>
        </member>
        <member name="M:Walgelijk.FontMaterialCreator.CreateMSDFMaterial(Walgelijk.IReadableTexture)">
            <summary>
            Create a material for MSDF (multichannel signed distance field) fonts
            </summary>
        </member>
        <member name="T:Walgelijk.FontRendering">
            <summary>
            The different types of font rendering methods
            </summary>
        </member>
        <member name="F:Walgelijk.FontRendering.Bitmap">
            <summary>
            Bitmap font type.
            </summary>
        </member>
        <member name="F:Walgelijk.FontRendering.SDF">
            <summary>
            Signed Distance Field (SDF) font type.
            </summary>
        </member>
        <member name="F:Walgelijk.FontRendering.MSDF">
            <summary>
            Multi-channel Signed Distance Field (MSDF) font type.
            </summary>
        </member>
        <member name="T:Walgelijk.TextMeshGenerator">
            <summary>
            Utility class that provides text mesh generation functions 
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.Font">
            <summary>
            Font to render with
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.Color">
            <summary>
            Color to set the vertices with
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.TrackingMultiplier">
            <summary>
            Tracking multiplier
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.KerningMultiplier">
            <summary>
            Kerning multiplier
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.LineHeightMultiplier">
            <summary>
            Line height multiplier
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.WrappingWidth">
            <summary>
            The width at which the text needs to start wrapping. Infinity by default.
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.HorizontalAlign">
            <summary>
            How to vertically align the text
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.VerticalAlign">
            <summary>
            How to vertically align the text
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.ParseRichText">
            <summary>
            Parse rich text tags
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.Multiline">
            <summary>
            The generator will consider newlines if this is true. If false, it'll just ignore them and stay on one line.
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.CalculateTextWidth(System.ReadOnlySpan{System.Char})">
            <summary>
            Return the total predicted width for a line of text ignoring all textbox and alignment settings
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.CalculateTextHeight(System.ReadOnlySpan{System.Char})">
            <summary>
            Return the total predicted height of a line according to line count and line height, accounting for textbox and alignment settings
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.Generate(System.String,Walgelijk.Vertex[],System.UInt32[],System.Collections.Generic.IList{Walgelijk.TextMeshGenerator.ColourInstruction})">
            <summary>
            Generate 2D text mesh. Returns a structure containing some results
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.Generate(System.ReadOnlySpan{System.Char},Walgelijk.Vertex[],System.UInt32[],System.Collections.Generic.IList{Walgelijk.TextMeshGenerator.ColourInstruction})">
            <summary>
            Generate 2D text mesh.
            </summary>
            <param name="displayString">Text to render</param>
            <param name="vertices">Vertex array that will be populated. This needs to be the length of displayString * 4</param>
            <param name="indices">Index array that will be populated. This needs to be the length of displayString * 6</param>
            <param name="colours">Colours to set at indices</param>
        </member>
        <member name="T:Walgelijk.TextMeshGenerator.ColourInstruction">
            <summary>
            Instruction that tells the generator when to set a colour
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.ColourInstruction.CharIndex">
            <summary>
            Character index at which to set the colour
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshGenerator.ColourInstruction.Colour">
            <summary>
            Colour to set when we reach <see cref="F:Walgelijk.TextMeshGenerator.ColourInstruction.CharIndex"/>
            </summary>
        </member>
        <member name="T:Walgelijk.HorizontalTextAlign">
            <summary>
            Ways to align text horizontally
            </summary>
        </member>
        <member name="T:Walgelijk.Kerning">
            <summary>
            Structure with kerning information
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.FirstChar">
            <summary>
            Preceding character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.SecondChar">
            <summary>
            Current character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.Amount">
            <summary>
            Offset amount
            </summary>
        </member>
        <member name="T:Walgelijk.KerningPair">
            <summary>
            The two characters a kerning amount applies to
            </summary>
        </member>
        <member name="F:Walgelijk.KerningPair.Current">
            <summary>
            Previous character in the sequence
            </summary>
        </member>
        <member name="F:Walgelijk.KerningPair.Next">
            <summary>
            Current character in the sequence
            </summary>
        </member>
        <member name="T:Walgelijk.RichTextTags">
            <summary>
            Contains the rich text tags as string constants
            </summary>
        </member>
        <member name="F:Walgelijk.RichTextTags.Colour">
            <summary>
            &lt;color=&quot;#ff00ff&quot;&gt;Text goes here&lt;/color&gt;
            </summary>
        </member>
        <member name="F:Walgelijk.RichTextTags.Italic">
            <summary>
            &lt;color=&quot;#ff00ff&quot;&gt;Text goes here&lt;/color&gt;
            </summary>
        </member>
        <member name="T:Walgelijk.TextMeshResult">
            <summary>
            Contains information about the results of text mesh generation
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshResult.GlyphCount">
            <summary>
            Amount of glyphs actually generated
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshResult.VertexCount">
            <summary>
            Amount of vertices actually generated
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshResult.IndexCount">
            <summary>
            Amount of indices actually generated
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshResult.LocalBounds">
            <summary>
            Resulting local bounding box of the text mesh
            </summary>
        </member>
        <member name="F:Walgelijk.TextMeshResult.LocalTextBounds">
            <summary>
            Resulting local bounding box of the text, taking the line height and amount of lines into account
            </summary>
        </member>
        <member name="T:Walgelijk.VerticalTextAlign">
            <summary>
            Ways to align text vertically
            </summary>
        </member>
        <member name="T:Walgelijk.CursorStack">
            <summary>
            Controls the cursor with a last-come-first-serve priority
            </summary>
        </member>
        <member name="F:Walgelijk.CursorStack.Fallthrough">
            <summary>
            The cursor to consider as "overwritable"
            </summary>
        </member>
        <member name="P:Walgelijk.CursorStack.ComputedCursor">
            <summary>
            The final computer cursor appearance
            </summary>
        </member>
        <member name="T:Walgelijk.DefaultCursor">
            <summary>
            System cursor textures
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Default">
            <summary>
            Default cursor 🖱
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Pointer">
            <summary>
            When a thing is clickable 👆
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Text">
            <summary>
            When editing text
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Crosshair">
            <summary>
            ✙
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Hand">
            <summary>
            🤚
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.HorizontalResize">
            <summary>
            ↔
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.VerticalResize">
            <summary>
            ↕
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultCursor.Invisible">
            <summary>
            Invisible cursor
            </summary>
        </member>
        <member name="T:Walgelijk.DrawBounds">
            <summary>
            Drawing bounds structure
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Size">
            <summary>
            Size of the rectangle in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Position">
            <summary>
            Top left corner of the rectangle in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Enabled">
            <summary>
            Activate / deactivate the drawing bounds
            </summary>
        </member>
        <member name="M:Walgelijk.DrawBounds.#ctor(System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
            Construct draw bounds settings
            </summary>
        </member>
        <member name="M:Walgelijk.DrawBounds.#ctor(Walgelijk.Rect,System.Boolean)">
            <summary>
            Construct draw bounds settings
            </summary>
        </member>
        <member name="P:Walgelijk.DrawBounds.DisabledBounds">
            <summary>
            Returns an instance that disables the drawbounds
            </summary>
        </member>
        <member name="T:Walgelijk.InputState">
            <summary>
            Struct that simply holds input data
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsDown">
            <summary>
            All mouse buttons that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsHeld">
            <summary>
            All mouse buttons that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsUp">
            <summary>
            All moues buttons that have been released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysDown">
            <summary>
            All keys that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysHeld">
            <summary>
            All keys that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysUp">
            <summary>
            All keys that were released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMousePosition">
            <summary>
            Mouse position in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMousePosition">
            <summary>
            Mouse position in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseScrollDelta">
            <summary>
            Mouse wheel delta over 1 frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyKey">
            <summary>
            Returns if any key is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyMouseButton">
            <summary>
            Returns if any mouse button is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.TextEntered">
            <summary>
            The text entered last frame
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyHeld(Walgelijk.Key)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyPressed(Walgelijk.Key)">
            <summary>
            Returns if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyReleased(Walgelijk.Key)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonHeld(Walgelijk.MouseButton)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonPressed(Walgelijk.MouseButton)">
            <summary>
            Returns if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonReleased(Walgelijk.MouseButton)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.Reset(Walgelijk.InputState@)">
            <summary>
            Reset the given <see cref="T:Walgelijk.InputState"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Mock.MockGraphics">
            <summary>
            Empty graphics implementation for testing purposes
            </summary>
        </member>
        <member name="T:Walgelijk.Mock.MockRenderTarget">
            <summary>
            Empty render target implementation for testing purposes
            </summary>
        </member>
        <member name="T:Walgelijk.Mock.MockWindow">
            <summary>
            Empty window implementation for testing purposes
            </summary>
        </member>
        <member name="T:Walgelijk.Window">
            <summary>
            A game window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Title">
            <summary>
            Title of the window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Position">
            <summary>
            Position of the window on the display in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Size">
            <summary>
            Size of the window in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Width">
            <summary>
            Identical to (int)Size.X
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Height">
            <summary>
            Identical to (int)Size.Y
            </summary>
        </member>
        <member name="P:Walgelijk.Window.VSync">
            <summary>
            Should vertical synchronisation be enabled
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsOpen">
            <summary>
            Is the window open?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.HasFocus">
            <summary>
            Does the window have user focus?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsVisible">
            <summary>
            Is the window visible?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Resizable">
            <summary>
            Is the window resizable?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.WindowType">
            <summary>
            Determines window border type
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Graphics">
            <summary>
            Graphics functions
            </summary>
        </member>
        <member name="P:Walgelijk.Window.DPI">
            <summary>
            DPI of the display this window is in
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsCursorLocked">
            <summary>
            If true, the cursor will be hidden and prevented from interacting with anything outside the window.
            </summary>
        </member>
        <member name="P:Walgelijk.Window.CursorAppearance">
            <summary>
            If <see cref="P:Walgelijk.Window.CustomCursor"/> is null, this will be used to determine the appearance of the cursor.
            </summary>
        </member>
        <member name="P:Walgelijk.Window.CustomCursor">
            <summary>
            If not null, the cursor will be rendered as the given texture
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderQueue">
            <summary>
            The window render queue. It stores the render tasks and is emptied and executed every render frame.
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Game">
            <summary>
            The <see cref="T:Walgelijk.Game"/> this window originates from
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderTarget">
            <summary>
            The main rendertarget for this window
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnResize">
            <summary>
            Fires when the window is resized. Provides new size
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnMove">
            <summary>
            Fires when the window is moved. Provides new position
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnFileDrop">
            <summary>
            Fires when a file is dropped on the window, Provides file paths
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnClose">
            <summary>
            Fires when the window is going to close
            </summary>
        </member>
        <member name="M:Walgelijk.Window.Initialise">
            <summary>
            Called by the game before the main loop starts
            </summary>
        </member>
        <member name="M:Walgelijk.Window.Deinitialise">
            <summary>
            Called by the game when the game loop has ended
            </summary>
        </member>
        <member name="M:Walgelijk.Window.LoopCycle">
            <summary>
            Called every frame by the game
            </summary>
        </member>
        <member name="M:Walgelijk.Window.Close">
            <summary>
            Close the window and stop the game loop
            </summary>
        </member>
        <member name="F:Walgelijk.Window.CursorStack">
            <summary>
            Provides a way for many sources to request a cursor appearance with a defined order of priority (last come first serve)
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ScreenToWindowPoint(System.Numerics.Vector2)">
            <summary>
            Turn screen coordinates into window coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WindowToScreenPoint(System.Numerics.Vector2)">
            <summary>
            Turn window coordinates into screen coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WorldToWindowPoint(System.Numerics.Vector2)">
            <summary>
            Turn world coordinates into window coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WindowToWorldPoint(System.Numerics.Vector2)">
            <summary>
            Turn window coordinates into world coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.InvokeResizeEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the resize event
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeMoveEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the move event
            </summary>
            <param name="newPosition"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeFileDropEvent(System.String[])">
            <summary>
            Invoke the file drop event
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeCloseEvent">
            <summary>
            Invoke the close event
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ResetInputState">
            <summary>
            Manually reset the input state
            </summary>
        </member>
        <member name="M:Walgelijk.Window.SetIcon(Walgelijk.IReadableTexture,System.Boolean)">
            <summary>
            Set the window icon
            </summary>
        </member>
        <member name="F:Walgelijk.Window.WorldBounds">
            <summary>
            The bounds of the window in world space. 
            E.g <see cref="!:WorldBounds.MinX"/> represents the leftmost world space X coordinate still visible in the window
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ConfineCursor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Confine the cursor to the bounds of the window.
            </summary>
            <param name="leftPadding">How many pixels away from the left edge of the screen the cursor is locked to.</param>
            <param name="topPadding">How many pixels away from the top edge of the screen the cursor is locked to.</param>
            <param name="widthPadding">How many pixels away from the right edge of the screen the cursor is locked to.</param>
            <param name="heightPadding">How many pixels away from the bottom edge of the screen the cursor is locked to.</param>
        </member>
        <member name="T:Walgelijk.WindowType">
            <summary>
            The window border type
            </summary>
        </member>
        <member name="F:Walgelijk.WindowType.Normal">
            <summary>
            Default window
            </summary>
        </member>
        <member name="F:Walgelijk.WindowType.Borderless">
            <summary>
            Borderless window (why)
            </summary>
        </member>
        <member name="F:Walgelijk.WindowType.BorderlessFullscreen">
            <summary>
            Borderless fullscreen
            </summary>
        </member>
        <member name="F:Walgelijk.WindowType.Fullscreen">
            <summary>
            Fullscreen
            </summary>
        </member>
        <member name="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1">
            <summary>
            Represents a thread-safe hash-based unique collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <remarks>
            All public members of <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> are thread-safe and may be used
            concurrently from multiple threads.
            </remarks>
        </member>
        <member name="P:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            that is used to determine equality for the values in the set.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to 
            provide hash values and determine equality for the values in the current <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1" />.
            </value>
            <remarks>
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1" /> requires an equality implementation to determine
            whether values are equal. You can specify an implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            generic interface by using a constructor that accepts a comparer parameter;
            if you do not specify one, the default generic equality comparer <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> is used.
            </remarks>
        </member>
        <member name="P:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Count">
            <summary>
            Gets the number of items contained in the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.
            </summary>
            <value>The number of items contained in the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</value>
            <remarks>Count has snapshot semantics and represents the number of items in the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            at the moment when Count was accessed.</remarks>
        </member>
        <member name="P:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> is empty.
            </summary>
            <value>true if the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> is empty; otherwise,
            false.</value>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that is empty, has the default concurrency level, has the default initial capacity, and
            uses the default comparer for the item type.
            </summary>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level and capacity, and uses the default
            comparer for the item type.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="concurrencyLevel"/> is
            less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity"/> is less than
            0.</exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that contains elements copied from the specified <see
            cref="T:System.Collections.Generic.IEnumerable`1"/>, has the default concurrency
            level, has the default initial capacity, and uses the default comparer for the item type.
            </summary>
            <param name="collection">The <see
            cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to
            the new
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference.</exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level and capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            implementation to use when comparing items.</param>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that contains elements copied from the specified <see
            cref="T:System.Collections.IEnumerable"/>, has the default concurrency level, has the default
            initial capacity, and uses the specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="collection">The <see
            cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to
            the new
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            implementation to use when comparing items.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference
            (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> 
            class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/>, 
            has the specified concurrency level, has the specified initial capacity, and uses the specified 
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the 
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new 
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use 
            when comparing items.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is a null reference.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1.
            </exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            class that is empty, has the specified concurrency level, has the specified initial capacity, and
            uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <param name="concurrencyLevel">The estimated number of threads that will update the
            <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> concurrently.</param>
            <param name="capacity">The initial number of elements that the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            implementation to use when comparing items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="concurrencyLevel"/> is less than 1. -or-
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Add(`0)">
            <summary>
            Adds the specified item to the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.
            </summary>
            <param name="item">The item to add.</param>
            <returns>true if the items was added to the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            successfully; false if it already exists.</returns>
            <exception cref="T:System.OverflowException">The <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>
            contains too many items.</exception>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.
            </summary>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> contains the specified
            item.
            </summary>
            <param name="item">The item to locate in the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</param>
            <returns>true if the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> contains the item; otherwise, false.</returns>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.TryGetValue(`0,`0@)">
            <summary>
            Searches the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/> for a given value and returns the equal value it finds, if any.
            </summary>
            <param name="equalValue">The value to search for.</param>
            <param name="actualValue">The value from the set that the search found, or the default value of <typeparamref name="T"/> when the search yielded no match.</param>
            <returns>A value indicating whether the search was successful.</returns>
            <remarks>
            This can be useful when you want to reuse a previously stored reference instead of
            a newly constructed one (so that more sharing of references can occur) or to look up
            a value that has more complete data than the value you currently have, although their
            comparer functions indicate they are equal.
            </remarks>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.TryRemove(`0)">
            <summary>
            Attempts to remove the item from the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if an item was removed successfully; otherwise, false.</returns>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</summary>
            <returns>An enumerator for the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</returns>
            <remarks>
            The enumerator returned from the collection is safe to use concurrently with
            reads and writes to the collection, however it does not represent a moment-in-time snapshot
            of the collection.  The contents exposed through the enumerator may contain modifications
            made to the collection after <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.GetEnumerator">
            <summary>Returns a value-type enumerator that iterates through the <see
            cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</summary>
            <returns>An enumerator for the <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1"/>.</returns>
            <remarks>
            The enumerator returned from the collection is safe to use concurrently with
            reads and writes to the collection, however it does not represent a moment-in-time snapshot
            of the collection.  The contents exposed through the enumerator may contain modifications
            made to the collection after <see cref="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.GetEnumerator"/> was called.
            </remarks>
        </member>
        <member name="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator">
            <summary>
            Represents an enumerator for <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1" />.
            </summary>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator.#ctor(i3arnon.ConcurrentCollections.ConcurrentHashSet{`0})">
            <summary>
            Constructs an enumerator for <see cref="T:i3arnon.ConcurrentCollections.ConcurrentHashSet`1" />.
            </summary>
        </member>
        <member name="P:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value>The element in the collection at the current position of the enumerator.</value>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:i3arnon.ConcurrentCollections.ConcurrentHashSet`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
    </members>
</doc>
